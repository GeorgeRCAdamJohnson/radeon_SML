{
  "title": "Distributed computing",
  "summary": "Distributed computing is a field of computer science that studies distributed systems, defined as computer systems whose inter-communicating components are located on different networked computers",
  "content": "Distributed computing System with multiple networked computers Not to be confused with Decentralized computing . Distributed computing is a field of computer science that studies distributed systems , defined as computer systems whose inter-communicating components are located on different networked computers . 1 2 The components of a distributed system communicate and coordinate their actions by passing messages to one another in order to achieve a common goal. Three challenges of distributed systems are: maintaining concurrency of components, overcoming the lack of a global clock , and managing the independent failure of components. 1 When a component of one system fails, the entire system does not fail. 3 Examples of distributed systems vary from SOA-based systems to microservices to massively multiplayer online games to peer-to-peer applications . Distributed systems cost more than monolithic architectures, primarily due to increased needs for additional hardware, servers, gateways, firewalls, new subnets, proxies, and so on. 4 Distributed systems can also suffer from fallacies of distributed computing . Conversely, a well-designed distributed system is more scalable, more durable, more changeable, and more fine-tuned than a monolithic application deployed on a single machine. 5 According to Marc Brooker: a system is scalable in the range where 16 the user then perceives the collection of autonomous processors as a unit. Alternatively, each computer may have its own user with individual needs, and the purpose of the distributed system is to coordinate the use of shared resources or provide communication services to the users. 17 Other typical properties of distributed systems are: The system must tolerate failures in individual computers. 18 The structure of the system (network topology, network latency, number of computers) is not known in advance. The system may consist of different kinds of computers and network links. The system may change during the execution of a distributed program. 19 Each computer has a limited, incomplete view of the system. Each computer may know only one part of the input. 20 Patterns Here are common architectural patterns used for distributed computing: 21 Saga interaction pattern Microservices Event driven architecture Events vs. Messages In distributed systems, events represent a fact or state change (e.g., OrderPlaced ) and are typically broadcast asynchronously to multiple consumers, promoting loose coupling and scalability. While events generally don't expect an immediate response, acknowledgment mechanisms are often implemented at the infrastructure level (e.g., Kafka commit offsets, SNS delivery statuses) rather than being an inherent part of the event pattern itself. 22 23 In contrast, messages serve a broader role, encompassing commands (e.g., ProcessPayment ), events (e.g., PaymentProcessed ), and documents (e.g., DataPayload ). Both events and messages can support various delivery guarantees, including at-least-once, at-most-once, and exactly-once, depending on the technology stack and implementation. However, exactly-once delivery is often achieved through idempotency mechanisms rather than true, infrastructure-level exactly-once semantics. 22 23 Delivery patterns for both events and messages include publish/subscribe (one-to-many) and point-to-point (one-to-one). While request/reply is technically possible, it is more commonly associated with messaging patterns rather than pure event-driven systems. Events excel at state propagation and decoupled notifications, while messages are better suited for command execution, workflow orchestration, and explicit coordination. 22 23 Modern architectures commonly combine both approaches, leveraging events for distributed state change notifications and messages for targeted command execution and structured workflows based on specific timing, ordering, and delivery requirements. 22 23 Parallel and distributed computing (a), (b): a distributed system. (c): a parallel system. Distributed systems are groups of networked computers which share a common goal for their work. The terms concurrent computing , parallel computing , and distributed computing have much overlap, and no clear distinction exists between them. 24 The same system may be characterized both as parallel and distributed ; the processors in a typical distributed system run concurrently in parallel. 25 Parallel computing may be seen as a particularly tightly coupled form of distributed computing, 26 and distributed computing may be seen as a loosely coupled form of parallel computing. 13 Nevertheless, it is possible to roughly classify concurrent systems as parallel or distributed using the following criteria: In parallel computing, all processors may have access to a shared memory to exchange information between processors. 27 In distributed computing, each processor has its own private memory ( distributed memory ). Information is exchanged by passing messages between the processors. 28 The figure on the right illustrates the difference between distributed and parallel systems. Figure (a) is a schematic view of a typical distributed system; the system is represented as a network topology in which each node is a computer and each line connecting the nodes is a communication link. Figure (b) shows the same distributed system in more detail: each computer has its own local memory, and information can be exchanged only by passing messages from one node to another by using the available communication links. Figure (c) shows a parallel system in which each processor has a direct access to a shared memory. The situation is further complicated by the traditional uses of the terms parallel and distributed algorithm that do not quite match the above definitions of parallel and distributed systems (see below for more detailed discussion). Nevertheless, as a rule of thumb, high-performance parallel computation in a shared-memory multiprocessor uses parallel algorithms while the coordination of a large-scale distributed system uses distributed algorithms. 29 History The use of concurrent processes which communicate through message-passing has its roots in operating system architectures studied in the 1960s. 30 The first widespread distributed systems were local-area networks such as Ethernet , which was invented in the 1970s. 31 ARPANET , one of the predecessors of the Internet , was introduced in the late 1960s, and ARPANET e-mail was invented in the early 1970s. E-mail became the most successful application of ARPANET, 32 and it is probably the earliest example of a large-scale distributed application . In addition to ARPANET (and its successor, the global Internet), other early worldwide computer networks included Usenet and FidoNet from the 1980s, both of which were used to support distributed discussion systems. 33 The study of distributed computing became its own branch of computer science in the late 1970s and early 1980s. The first conference in the field, Symposium on Principles of Distributed Computing (PODC), dates back to 1982, and its counterpart International Symposium on Distributed Computing (DISC) was first held in Ottawa in 1985 as the International Workshop on Distributed Algorithms on Graphs. 34 Architectures Various hardware and software architectures are used for distributed computing. At a lower level, it is necessary to interconnect multiple CPUs with some sort of network, regardless of whether that network is printed onto a circuit board or made up of loosely coupled devices and cables. At a higher level, it is necessary to interconnect processes running on those CPUs with some sort of communication system . 35 Whether these CPUs share resources or not determines a first distinction between three types of architecture: Shared memory Shared disk Shared nothing . Distributed programming typically falls into one of several basic architectures: client–server , three-tier , n -tier , or peer-to-peer ; or categories: loose coupling , or tight coupling . 36 Client–server : architectures where smart clients contact the server for data then format and display it to the users. Input at the client is committed back to the server when it represents a permanent change. Three-tier : architectures that move the client intelligence to a middle tier so that stateless clients can be used. This simplifies application deployment. Most web applications are three-tier. n -tier : architectures that refer typically to web applications which further forward their requests to other enterprise services. This type of application is the one most responsible for the success of application servers . Peer-to-peer : architectures where there are no special machines that provide a service or manage the network resources. 37 : 227 Instead all responsibilities are uniformly divided among all machines, known as peers. Peers can serve both as clients and as servers. 38 Examples of this architecture include BitTorrent and the bitcoin network . Another basic aspect of distributed computing architecture is the method of communicating and coordinating work among concurrent processes. Through various message passing protocols, processes may communicate directly with one another, typically in a main/sub relationship. Alternatively, a database-centric architecture can enable distributed computing to be done without any form of direct inter-process communication , by utilizing a shared database . 39 Database-centric architecture in particular provides relational processing analytics in a schematic architecture allowing for live environment relay. This enables distributed computing functions both within and beyond the parameters of a networked database. 40 Cell-Based Architecture Cell-based architecture is a distributed computing approach in which computational resources are organized into self-contained units called cells. Each cell operates independently, processing requests while maintaining scalability, fault isolation, and availability. 41 42 43 A cell typically consists of multiple services or application components and functions as an autonomous unit. Some implementations replicate entire sets of services across multiple cells, while others partition workloads between cells. In replicated models, requests may be rerouted to an operational cell if another experiences a failure. This design is intended to enhance system resilience by reducing the impact of localized failures. 44 45 46 Some implementations employ circuit breakers within and between cells. Within a cell, circuit breakers may be used to prevent cascading failures among services, while inter-cell circuit breakers can isolate failing cells and redirect traffic to those that remain operational. 47 48 49 Cell-based architecture has been adopted in some large-scale distributed systems, particularly in cloud-native and high-availability environments, where fault isolation and redundancy are key design considerations. Its implementation varies depending on system requirements, infrastructure constraints, and operational objectives. 50 51 52 Applications Reasons for using distributed systems and distributed computing may include: The very nature of an application may require the use of a communication network that connects several computers: for example, data produced in one physical location and required in another location. There are many cases in which the use of a single computer would be possible in principle, but the use of a distributed system is beneficial for practical reasons. For example: It can allow for much larger storage and memory, faster compute, and higher bandwidth than a single machine. It can provide more reliability than a non-distributed system, as there is no single point of failure . Moreover, a distributed system may be easier to expand and manage than a monolithic uniprocessor system. 53 It may be more cost-efficient to obtain the desired level of performance by using a cluster of several low-end computers, in comparison with a single high-end computer. Examples Examples of distributed systems and applications of distributed computing include the following: 54 telecommunications networks: telephone networks and cellular networks , computer networks such as the Internet , wireless sensor networks , routing algorithms ; network applications: World Wide Web and peer-to-peer networks , massively multiplayer online games and virtual reality communities, distributed databases and distributed database management systems , network file systems , distributed cache such as burst buffers , distributed information processing systems such as banking systems and airline reservation systems; real-time process control: aircraft control systems, industrial control systems ; parallel computation : scientific computing , including cluster computing , grid computing , cloud computing , 55 and various volunteer computing projects , distributed rendering in computer graphics. peer-to-peer Reactive distributed systems According to Reactive Manifesto, reactive distributed systems are responsive, resilient, elastic and message-driven. Subsequently, Reactive systems are more flexible, loosely-coupled and scalable. To make your systems reactive, you are advised to implement Reactive Principles. Reactive Principles are a set of principles and patterns which help to make your cloud native application as well as edge native applications more reactive. 56 Theoretical foundations Main article: Distributed algorithm Models Many tasks that we would like to automate by using a computer are of question–answer type: we would like to ask a question and the computer should produce an answer. In theoretical computer science , such tasks are called computational problems . Formally, a computational problem consists of instances together with a solution for each instance. Instances are questions that we can ask, and solutions are desired answers to these questions. Theoretical computer science seeks to understand which computational problems can be solved by using a computer ( computability theory ) and how efficiently ( computational complexity theory ). Traditionally, it is said that a problem can be solved by using a computer if we can design an algorithm that produces a correct solution for any given instance. Such an algorithm can be implemented as a computer program that runs on a general-purpose computer: the program reads a problem instance from input , performs some computation, and produces the solution as output . Formalisms such as random-access machines or universal Turing machines can be used as abstract models of a sequential general-purpose computer executing such an algorithm. 57 58 The field of concurrent and distributed computing studies similar questions in the case of either multiple computers, or a computer that executes a network of interacting processes: which computational problems can be solved in such a network and how efficiently? However, it is not at all obvious what is meant by solving a problem in the case of a concurrent or distributed system: for example, what is the task of the algorithm designer, and what is the concurrent or distributed equivalent of a sequential general-purpose computer? citation needed The discussion below focuses on the case of multiple computers, although many of the issues are the same for concurrent processes running on a single computer. Three viewpoints are commonly used: Parallel algorithms in shared-memory model All processors have access to a shared memory. The algorithm designer chooses the program executed by each processor. One theoretical model is the parallel random-access machines (PRAM) that are used. 59 However, the classical PRAM model assumes synchronous access to the shared memory. Shared-memory programs can be extended to distributed systems if the underlying operating system encapsulates the communication between nodes and virtually unifies the memory across all individual systems. A model that is closer to the behavior of real-world multiprocessor machines and takes into account the use of machine instructions, such as Compare-and-swap (CAS), is that of asynchronous shared memory . There is a wide body of work on this model, a summary of which can be found in the literature. 60 61 Parallel algorithms in message-passing model The algorithm designer chooses the structure of the network, as well as the program executed by each computer. Models such as Boolean circuits and sorting networks are used. 62 A Boolean circuit can be seen as a computer network: each gate is a computer that runs an extremely simple computer program. Similarly, a sorting network can be seen as a computer network: each comparator is a computer. Distributed algorithms in message-passing model The algorithm designer only chooses the computer program. All computers run the same program. The system must work correctly regardless of the structure of the network. A commonly used model is a graph with one finite-state machine per node. In the case of distributed algorithms, computational problems are typically related to graphs. Often the graph that describes the structure of the computer network is the problem instance. This is illustrated in the following example. 63 An example Consider the computational problem of finding a the computers must exchange messages with each other to discover more about the structure of G . Each computer must produce its own Steen, Maarten van (2002). Distributed systems: principles and paradigms . Upper Saddle River, NJ: Pearson Prentice Hall. ISBN 0-13-088893-1 . Archived from the original on 2020-08-12 . Retrieved 2020-08-28 . ↑ Distributed Programs . Texts in Computer Science . London: Springer London. 2010. pp. 373– 406. doi : 10.1007/978-1-84882-745-5_11 . ISBN 978-1-84882-744-8 . ISSN 1868-0941 . Systems consist of a number of physically distributed components that work independently using their private storage, but also communicate from time to time by explicit message passing. Such systems are called distributed systems. ↑ Dusseau Dusseau 2016 , p. 1–2. ↑ Ford, Neal (March 3, 2020). Fundamentals of Software Architecture: An Engineering Approach (1st ed.). O'Reilly Media. pp. 146– 147. ISBN 978-1-4920-4345-4 . ↑ Monolith to Microservices Evolutionary Patterns to Transform Your Monolith . O'Reilly Media. ISBN 978-1-4920-4781-0 . ↑ Building Serverless Applications on Knative . O'Reilly Media. ISBN 978-1-0981-4204-9 . ↑ Distributed Programs . Texts in Computer Science . London: Springer London. 2010. pp. 373– 406. doi : 10.1007/978-1-84882-745-5_11 . ISBN 978-1-84882-744-8 . ISSN 1868-0941 . Distributed programs are abstract descriptions of distributed systems. A distributed program consists of a collection of processes that work concurrently and communicate by explicit message passing. Each process can access a set of variables which are disjoint from the variables that can be changed by any other process. ↑ Andrews (2000) . Dolev (2000) . Ghosh (2007) , p. 10. ↑ Magnoni, L. (2015). Modern Messaging for Distributed Sytems (sic) . Journal of Physics: Conference Series . 608 (1) 012038. Bibcode : 2015JPhCS.608a2038M . doi : 10.1088/1742-6596/608/1/012038 . ISSN 1742-6596 . ↑ Godfrey (2002) . 1 2 Andrews (2000) , p. 291–292. Dolev (2000) , p. 5. ↑ Lynch (1996) , p. 1. 1 2 Ghosh (2007) , p. 10. ↑ Andrews (2000) , pp. 8–9, 291. Dolev (2000) , p. 5. Ghosh (2007) , p. 3. Lynch (1996) , p. xix, 1. Peleg (2000) , p. xv. ↑ Andrews (2000) , p. 291. Ghosh (2007) , p. 3. Peleg (2000) , p. 4. ↑ Ghosh (2007) , p. 3–4. Peleg (2000) , p. 1. ↑ Ghosh (2007) , p. 4. Peleg (2000) , p. 2. ↑ Ghosh (2007) , p. 4, 8. Lynch (1996) , p. 2–3. Peleg (2000) , p. 4. ↑ Lynch (1996) , p. 2. Peleg (2000) , p. 1. ↑ Ghosh (2007) , p. 7. Lynch (1996) , p. xix, 2. Peleg (2000) , p. 4. ↑ Fundamentals of Software Architecture: An Engineering Approach . O'Reilly Media. 2020. ISBN 978-1-4920-4345-4 . 1 2 3 4 Kleppmann, Martin (2017). Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems . O'Reilly Media. ISBN 978-1-4493-7332-0 . 1 2 3 4 Building Event-Driven Microservices: Leveraging Organizational Data at Scale . ISBN 978-1-4920-5789-5 . ↑ Ghosh (2007) , p. 10. Keidar (2008) . ↑ Lynch (1996) , p. xix, 1–2. Peleg (2000) , p. 1. ↑ Peleg (2000) , p. 1. ↑ Papadimitriou (1994) , Chapter 15. Keidar (2008) . ↑ See references in Introduction . ↑ Bentaleb, A.; Yifan, L.; Xin, J.; et al. (2016). Parallel and Distributed Algorithms (PDF) . National University of Singapore. Archived (PDF) from the original on 2017-03-26 . Retrieved 20 July 2018 . ↑ Andrews (2000) , p. 348. ↑ Andrews (2000) , p. 32. ↑ Peter (2004) , The history of email Archived 2009-04-15 at the Wayback Machine . ↑ Banks, M. (2012). On the Way to the Web: The Secret History of the Internet and its Founders . Apress. pp. 44– 5. ISBN 978-1-4302-5074-6 . Archived from the original on 2023-01-20 . Retrieved 2018-07-20 . ↑ Tel, G. (2000). Introduction to Distributed Algorithms . Cambridge University Press. pp. 35– 36. ISBN 978-0-521-79483-1 . Archived from the original on 2023-01-20 . Retrieved 2018-07-20 . ↑ Ohlídal, M.; Jaroš, J.; Schwarz, J.; et al. (2006). Evolutionary Design of OAB and AAB Communication Schedules for Interconnection Networks . In Rothlauf, F.; Branke, J.; Cagnoni, S. (eds.). Applications of Evolutionary Computing . Springer Science Business Media. pp. 267– 78. ISBN 978-3-540-33237-4 . ↑ Real Time And Distributed Computing Systems (PDF) . ISSN 2278-0661 . Archived from the original (PDF) on 2017-01-10 . Retrieved 2017-01-09 . : Cite journal requires | journal= ( help ) ↑ Vigna P, Casey MJ. The Age of Cryptocurrency: How Bitcoin and the Blockchain Are Challenging the Global Economic Order St. Martin's Press January 27, 2015 ISBN 9781250065636 ↑ Quang Hieu Vu; Mihai Lupu; Beng Chin Ooi (2010). Peer-to-peer computing: principles and applications . Heidelberg: Springer. p. 16. ISBN 978-3-642-03513-5 . OCLC 663093862 . ↑ Lind P, Alm M (2006), A database-centric virtual chemistry system , J Chem Inf Model , 46 (3): 1034– 9, doi : 10.1021/ci050360b , PMID 16711722 . ↑ Chiu, G (1990). A model for optimal database allocation in distributed computing systems . Proceedings. IEEE INFOCOM'90: Ninth Annual Joint Conference of the IEEE Computer and Communications Societies . ↑ Newman, Sam (2015-02-20). Building Microservices . O'Reilly Media. ISBN 978-1-4919-5035-7 . ↑ Richardson, Chris (2019). Microservices patterns: with examples in Java . Shelter Island, NY: Manning Publications. ISBN 978-1-61729-454-9 . ↑ Christudas, Binildas (2019). Practical Microservices Architectural Patterns: Event-Based Java Microservices with Spring Boot and Spring Cloud . Berkeley, CA: Apress L. P. ISBN 978-1-4842-4501-9 . ↑ Newman, Sam (2015-02-20). Building Microservices . O'Reilly Media. ISBN 978-1-4919-5035-7 . ↑ Richardson, Chris (2019). Microservices patterns: with examples in Java . Shelter Island, NY: Manning Publications. ISBN 978-1-61729-454-9 . ↑ Christudas, Binildas (2019). Practical Microservices Architectural Patterns: Event-Based Java Microservices with Spring Boot and Spring Cloud . Berkeley, CA: Apress L. P. ISBN 978-1-4842-4501-9 . ↑ Newman, Sam (2015-02-20). Building Microservices . O'Reilly Media. ISBN 978-1-4919-5035-7 . ↑ Richardson, Chris (2019). Microservices patterns: with examples in Java . Shelter Island, NY: Manning Publications. ISBN 978-1-61729-454-9 . ↑ Christudas, Binildas (2019). Practical Microservices Architectural Patterns: Event-Based Java Microservices with Spring Boot and Spring Cloud . Berkeley, CA: Apress L. P. ISBN 978-1-4842-4501-9 . ↑ Newman, Sam (2015-02-20). Building Microservices . O'Reilly Media. ISBN 978-1-4919-5035-7 . ↑ Richardson, Chris (2019). Microservices patterns: with examples in Java . Shelter Island, NY: Manning Publications. ISBN 978-1-61729-454-9 . ↑ Christudas, Binildas (2019). Practical Microservices Architectural Patterns: Event-Based Java Microservices with Spring Boot and Spring Cloud . Berkeley, CA: Apress L. P. ISBN 978-1-4842-4501-9 . ↑ Elmasri Navathe (2000) , Section 24.1.2. ↑ Andrews (2000) , p. 10–11. Ghosh (2007) , p. 4–6. Lynch (1996) , p. xix, 1. Peleg (2000) , p. xv. Elmasri Navathe (2000) , Section 24. ↑ Haussmann, J. (2019). Cost-efficient parallel processing of irregularly structured problems in cloud computing environments . Journal of Cluster Computing . 22 (3): 887– 909. doi : 10.1007/s10586-018-2879-3 . S2CID 54447518 . ↑ Reactive Application Development . Manning. 2018. ISBN 978-1-63835-581-6 . ↑ Toomarian, N.B.; Barhen, J.; Gulati, S. (1992). Neural Networks for Real-Time Robotic Applications . In Fijany, A.; Bejczy, A. (eds.). Parallel Computation Systems For Robotics: Algorithms And Architectures . World Scientific. p. 214. ISBN 978-981-4506-17-5 . Archived from the original on 2020-08-01 . Retrieved 2018-07-20 . ↑ Savage, J.E. (1998). Models of Computation: Exploring the Power of Computing . Addison Wesley. p. 209. ISBN 978-0-201-89539-1 . ↑ Cormen, Leiserson Rivest (1990) , Section 30. ↑ Herlihy Shavit (2008) , Chapters 2–6. ↑ Lynch (1996) ↑ Cormen, Leiserson Rivest (1990) , Sections 28 and 29. 1 2 3 TULSIRAMJI GAIKWAD-PATIL College of Engineering Technology, Nagpur Department of Information Technology Introduction to Distributed Systems ↑ Cole Vishkin (1986) . Cormen, Leiserson Rivest (1990) , Section 30.5. ↑ Andrews (2000) , p. ix. ↑ Arora Barak (2009) , Section 6.7. Papadimitriou (1994) , Section 15.3. ↑ Papadimitriou (1994) , Section 15.2. ↑ Lynch (1996) , p. 17–23. ↑ Peleg (2000) , Sections 2.3 and 7. Linial (1992) . Naor Stockmeyer (1995) . ↑ Schneider, J.; Wattenhofer, R. (2011). Trading Bit, Message, and Time Complexity of Distributed Algorithms . In Peleg, D. (ed.). Distributed Computing . Springer Science Business Media. pp. 51– 65. ISBN 978-3-642-24099-7 . Archived from the original on 2020-08-01 . Retrieved 2018-07-20 . ↑ Lynch (1996) , Sections 5–7. Ghosh (2007) , Chapter 13. ↑ Lynch (1996) , p. 99–102. Ghosh (2007) , p. 192–193. ↑ Dolev (2000) . Ghosh (2007) , Chapter 17. ↑ Lynch (1996) , Section 16. Peleg (2000) , Section 6. ↑ Lynch (1996) , Section 18. Ghosh (2007) , Sections 6.2–6.3. ↑ Ghosh (2007) , Section 6.4. ↑ Kamburugamuve, Supun; Ekanayake, Saliya (2021). Foundations of Data Intensive Applications Large Scale Data Analytics Under the Hood . John Wiley Sons. ISBN 978-1-119-71301-2 . 1 2 Haloi, S. (2015). Apache ZooKeeper Essentials . Packt Publishing Ltd. pp. 100– 101. ISBN 978-1-78439-832-3 . Archived from the original on 2023-01-20 . Retrieved 2018-07-20 . ↑ LeLann, G. (1977). Distributed systems - toward a formal approach . Information Processing . 77 : 155·160 – via Elsevier. ↑ R. G. Gallager , P. A. Humblet, and P. M. Spira (January 1983). A Distributed Algorithm for Minimum-Weight Spanning Trees (PDF) . ACM Transactions on Programming Languages and Systems . 5 (1): 66– 77. doi : 10.1145/357195.357200 . S2CID 2758285 . Archived (PDF) from the original on 2017-09-26. : CS1 maint: multiple names: authors list ( link ) ↑ Korach, Ephraim; Kutten, Shay ; Moran, Shlomo (1990). A Modular Technique for the Design of Efficient Distributed Leader Finding Algorithms (PDF) . ACM Transactions on Programming Languages and Systems . 12 (1): 84– 101. CiteSeerX 10.1.1.139.7342 . doi : 10.1145/77606.77610 . S2CID 9175968 . Archived (PDF) from the original on 2007-04-18. ↑ Hamilton, Howard. Distributed Algorithms . Archived from the original on 2012-11-24 . Retrieved 2013-03-03 . ↑ Major unsolved problems in distributed systems? . cstheory.stackexchange.com . Archived from the original on 20 January 2023 . Retrieved 16 March 2018 . ↑ How big data and distributed systems solve traditional scalability problems . theserverside.com . Archived from the original on 17 March 2018 . Retrieved 16 March 2018 . ↑ Svozil, K. (2011). Indeterminism and Randomness Through Physics . In Hector, Z. (ed.). Randomness Through Computation: Some Answers, More Questions . World Scientific. pp. 112– 3. ISBN 978-981-4462-63-1 . Archived from the original on 2020-08-01 . Retrieved 2018-07-20 . ↑ Papadimitriou (1994) , Section 19.3. References n* ,,, , . !----> n* ,,, , . !----> n* ,,, , . !----> n* ,,, , . !----> n* ,,, , . !----> n* ,,, , . !----> n* ,,, , . !----> n* ,,, , . !----> n* ,,, , . !----> n; Articles n* ,,, , . n*",
  "cached_at": "2025-10-25T20:03:19.097270"
}