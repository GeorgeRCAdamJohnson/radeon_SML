{
  "title": "Real-time computing",
  "summary": "Real-time computing (RTC) is the computer science term for hardware and software systems subject to a real-time constraint , for example from event to system response. Real-time programs must guarantee response within specified time constraints, often referred to as deadlines",
  "content": "Real-time computing Study of hardware and software systems that have a real-time constraint Not to be confused with Real-time communication or Real-time clock , closely related technologies that are also often abbreviated to RTC. html body.mediawiki This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources: Real-time computing – news · newspapers · books · scholar · JSTOR ( April 2014 ) ( Learn how and when to remove this message ) Real-time computing ( RTC ) is the computer science term for hardware and software systems subject to a real-time constraint , for example from event to system response . 1 Real-time programs must guarantee response within specified time constraints, often referred to as deadlines . 2 The term real-time is also used in simulation to mean that the simulation's clock runs at the same speed as a real clock. Real-time responses are often understood to be in the order of milliseconds, and sometimes microseconds. A system not specified as operating in real time cannot usually guarantee a response within any timeframe, although typical or expected response times may be given. Real-time processing fails if not completed within a specified deadline relative to an event; deadlines must always be met, regardless of system load . A real-time system has been described as one which controls an environment by receiving data, processing them, and returning the results sufficiently quickly to affect the environment at that time . 3 The term real-time is used in process control and enterprise systems to mean without significant delay . Real-time software may use one or more of the following: synchronous programming languages , real-time operating systems (RTOSes), and real-time networks. Each of these provide essential frameworks on which to build a real-time software application. Systems used for many safety-critical applications must be real-time, such as for control of fly-by-wire aircraft, or anti-lock brakes , both of which demand immediate and accurate mechanical response. 4 History The term real-time derives from its use in early simulation , where a real-world process is simulated at a rate which matched that of the real process (now called real-time simulation to avoid ambiguity). Analog computers , most often, were capable of simulating at a much faster pace than real-time, a situation that could be just as dangerous as a slow simulation if it were not also recognized and accounted for. Minicomputers, particularly in the 1970s onwards, when built into dedicated embedded systems such as DOG ( Digital on-screen graphic ) scanners, increased the need for low-latency priority-driven responses to important interactions with incoming data. Operating systems such as Data General 's RDOS (Real-Time Disk Operating System) and RTOS with depending on the game, this may only affect its graphics (while the gameplay continues at normal speed), or the gameplay itself may be slowed down (which was common on older third- and fourth-generation consoles ). Real-time in digital signal processing In a real-time digital signal processing (DSP) process, the analyzed (input) and generated (output) samples can be processed (or generated) continuously in the time it takes to input and output the same set of samples independent of the processing delay. 9 It means that the processing delay must be bounded even if the processing continues for an unlimited time. The mean processing time per sample, including overhead , is no greater than the sampling period, which is the reciprocal of the sampling rate . This is the criterion whether the samples are grouped together in large segments and processed as blocks or are processed individually and whether there are long, short, or non-existent input and output buffers . Consider an audio DSP example; if a process requires 2.01 seconds to analyze , synthesize , or process 2.00 seconds of sound, it is not real-time. However, if it takes 1.99 seconds, it is or can be made into a real-time DSP process. A common life analogy is standing in a line or queue waiting for the checkout in a grocery store. If the line asymptotically grows longer and longer without bound, the checkout process is not real-time. If the length of the line is bounded, customers are being processed and output as rapidly, on average, as they are being inputted then that process is real-time. The grocer might go out of business or must at least lose business if they cannot make their checkout process real-time; thus, it is fundamentally important that this process is real-time. A signal processing algorithm that cannot keep up with the flow of input data with output falling further and further behind the input, is not real-time. If the delay of the output (relative to the input) is bounded regarding a process which operates over an unlimited time, then that signal processing algorithm is real-time, even if the throughput delay may be very long. Live vs. real-time Real-time signal processing is necessary, but not sufficient in and of itself, for live signal processing such as what is required in live event support . Live audio digital signal processing requires both real-time operation and a sufficient limit to throughput delay so as to be tolerable to performers using stage monitors or in-ear monitors and not noticeable as lip sync error by the audience also directly watching the performers. Tolerable limits to latency for live, real-time processing is a subject of investigation and debate, but is estimated to be between 6 and 20 milliseconds. 10 Real-time bidirectional telecommunications delays of less than 300 ms ( round trip or twice the unidirectional delay) are considered acceptable to avoid undesired talk-over in conversation. Real-time and high-performance Real-time computing is sometimes misunderstood to be high-performance computing , but this is not an accurate classification. 11 For example, a massive supercomputer executing a scientific simulation may offer impressive performance, yet it is not executing a real-time computation. Conversely, once the hardware and software for an anti-lock braking system have been designed to meet its required deadlines, no further performance gains are obligatory or even useful. Furthermore, if a network server is highly loaded with network traffic, its response time may be slower, but will (in most cases) still succeed before it times out (hits its deadline). Hence, such a network server would not be considered a real-time system: temporal failures (delays, time-outs, etc.) are typically small and compartmentalized (limited in effect), but are not catastrophic failures . In a real-time system, such as the FTSE 100 Index , a slow-down beyond limits would often be considered catastrophic in its application context. The most important requirement of a real-time system is consistent output, not high throughput. Some kinds of software, such as many chess-playing programs , can fall into either category. For instance, a chess program designed to play in a tournament with a clock will need to decide on a move before a certain deadline or lose the game, and is therefore a real-time computation, but a chess program that is allowed to run indefinitely before moving is not. In both of these cases, however, high performance is desirable: the more work a tournament chess program can do in the allotted time, the better its moves will be, and the faster an unconstrained chess program runs, the sooner it will be able to move. This example also illustrates the essential difference between real-time computations and other computations: if the tournament chess program does not make a decision about its next move in its allotted time it loses the game—i.e., it fails as a real-time computation—while in the other scenario, meeting the deadline is assumed not to be necessary. High-performance is indicative of the amount of processing that is performed in a given amount of time, whereas real-time is the ability to get done with the processing to yield a useful output in the available time. Near real-time The term near real-time or nearly real-time (NRT), in telecommunications and computing , refers to the time delay introduced, by automated data processing or network transmission, between the occurrence of an event and the use of the processed data, such as for display or feedback and control purposes. For example, a near-real-time display depicts an event or situation as it existed at the current time minus the processing time, as nearly the time of the live event. 12 The distinction between the terms near real time and real time is somewhat nebulous and must be defined for the situation at hand. The term implies that there are no significant delays. 12 In many cases, processing described as real-time would be more accurately described as near real-time . Near real-time also refers to delayed real-time transmission of voice and video. It allows playing video images, in approximately real-time, without having to wait for an entire large video file to download. Incompatible databases can export/import to common flat files that the other database can import/export on a scheduled basis so they can sync/share common data in near real-time with each other. Design methods Several methods exist to aid the design of real-time systems, an example of which is MASCOT , an old but very successful method that represents the concurrent structure of the system. Other examples are HOOD , Real-Time UML , AADL , the Ravenscar profile , and Real-time Java . See also Autonomous peripheral operation Control system Failure detector Nodal architecture Processing modes Ptolemy Project Real-time data Real-time computer graphics Real-time operating system Real-time testing Remote diagnostics Scheduling analysis real-time systems Synchronous programming language Time-utility function Ward–Mellor method Worst-case execution time References ↑ body:not(.skin-timeless):not(.skin-minerva) FreeRTOS – Open Source RTOS Kernel for small embedded systems – What is FreeRTOS FAQ? . FreeRTOS . Retrieved 2021-03-08 . ↑ Ben-Ari, Mordechai ; Principles of Concurrent and Distributed Programming , ch. 16, Prentice Hall, 1990, ISBN 0-13-711821-X , p. 164 ↑ Martin, James (1965). Programming Real-time Computer Systems . Englewood Cliffs, New Jersey: Prentice-Hall Incorporated. p. 4 . ISBN 978-0-13-730507-0 . ↑ Kant, Krishna (May 2010). Computer-Based Industrial Control . PHI Learning. p. 356. ISBN 9788120339880 . Retrieved 2015-01-17 . ↑ Shin, Kang G. ; Ramanathan, Parameswaran (Jan 1994). Real-time computing: a new discipline of computer science and engineering (PDF) . Proceedings of the IEEE . 82 (1): 6– 24. CiteSeerX 10.1.1.252.3947 . doi : 10.1109/5.259423 . ISSN 0018-9219 . ↑ Kopetz, Hermann; Real-Time Systems: Design Principles for Distributed Embedded Applications , Kluwer Academic Publishers, 1997 ↑ Liu, Chang L.; and Layland, James W.; Scheduling Algorithms for Multiprogramming in a Hard Real-time Environment , Journal of the ACM , 20(1):46-61, January 1973, http://citeseer.ist.psu.edu/liu73scheduling.html ↑ Menychtas, Andreas; Kyriazis, Dimosthenis; Tserpes, Konstantinos (July 2009). Real-time reconfiguration for guaranteeing QoS provisioning levels in Grid environments . Future Generation Computer Systems . 25 (7): 779– 784. doi : 10.1016/j.future.2008.11.001 . ↑ Kuo, Sen M.; Lee, Bob H.; and Tian, Wenshun; Real-Time Digital Signal Processing: Implementations and Applications , Wiley, 2006, ISBN 0-470-01495-4 , Section 1.3.4: Real-Time Constraints . ↑ Kudrle, Sara; Proulx, Michel; Carrieres, Pascal; Lopez, Marco; et al. (July 2011). Fingerprinting for Solving A/V Synchronization Issues within Broadcast Environments . SMPTE Motion Imaging Journal . 120 (5): 36– 46. doi : 10.5594/j18059XY . Appropriate A/V sync limits have been established and the range that is considered acceptable for film is +/- 22 ms. The range for video, according to the ATSC, is up to 15 ms lead time and about 45 ms lag time ↑ Stankovic, John (1988), Misconceptions about real-time computing: a serious problem for next-generation systems , Computer , vol. 21, no. 10, IEEE Computer Society, p. 11, doi : 10.1109/2.7053 , S2CID 13884580 1 2 Federal Standard 1037C: Glossary of Telecommunications Terms . Its.bldrdoc.gov . Retrieved 2014-04-26 . Further reading Burns, Alan; Wellings, Andy (2009), Real-Time Systems and Programming Languages (4th ed.), Addison-Wesley, ISBN 978-0-321-41745-9 Buttazzo, Giorgio (2011), Hard Real-Time Computing Systems: Predictable Scheduling Algorithms and Applications , New York, New York: Springer, ISBN 9781461406761 – via Google Books . Liu, Jane W. S. (2000), Real-time systems , Upper Saddle River, New Jersey: Prentice Hall . The International Journal of Time-Critical Computing Systems External links IEEE Technical Committee on Real-Time Systems Euromicro Technical Committee on Real-time Systems The What, Where and Why of Real-Time Simulation Johnstone, R.L. RTOS—Extending OS/360 for real time spaceflight control (PDF) . Bitsavers . Retrieved February 24, 2023 . Coyle, R. J.; Stewart, J. K. (September 1963). Design of a Real-time Programming System . Computers and Automation . XII (9). Silver Spring, Maryland: Datatrol Corporation: 26– 34. ... set of notes which will hopefully point up problem areas which should be considered in real time design. body.skin--responsive html.skin-theme-clientpref-night v t e Computer science Note: This template roughly follows the 2012 ACM Computing Classification System . Hardware Printed circuit board Peripheral Integrated circuit Very-large-scale integration System on a chip (SoC) Energy consumption (green computing) Electronic design automation Hardware acceleration Processor Size / Form Computer systems organization Computer architecture Computational complexity Dependability Embedded system Real-time computing Cyber-physical system Fault tolerance Wireless sensor network Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domain-specific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Control variable Software development process Requirements analysis Software design Software construction Software deployment Software engineering Software maintenance Programming team Open-source model Theory of computation Model of computation Stochastic Formal language Automata theory Computability theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Theoretical computer science Computational problem Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security hacker Security services Intrusion detection system Hardware security Network security Information security Application security Human-centered computing Interaction design Augmented reality Virtual reality Social computing Ubiquitous computing Visualization Accessibility Human–computer interaction Mobile computing Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multi-task learning Cross-validation Graphics Animation Rendering Photograph manipulation Graphics processing unit Image compression Solid modeling Applied computing Quantum computing E-commerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Differentiable computing Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Category Outline Glossaries",
  "cached_at": "2025-10-25T20:03:18.157902"
}