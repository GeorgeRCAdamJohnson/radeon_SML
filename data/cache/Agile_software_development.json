{
  "title": "Agile software development",
  "summary": "Agile software development is an umbrella term for approaches to developing software that reflect the values and principles agreed upon by The Agile Alliance, a group of 17 software practitioners, in 2001. As documented in their Manifesto for Agile Software Development, the practitioners value:Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan",
  "content": "Agile software development Umbrella term for certain approaches to software development body.skin-minerva body.skin--responsive Part of a series on Software development Core activities Data modeling Processes Requirements Design Construction Engineering Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DAD DevOps DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TDD TSP UP XP Supporting disciplines Configuration management Deployment management Documentation Project management Quality assurance User experience Practices ATDD BDD CCO CD CI DDD PP SBE Stand-up TDD Tools Build automation Compiler Debugger GUI builder IDE Infrastructure as code Profiler Release automation UML Modeling Standards and bodies of knowledge CMMI IEEE standards IREB ISO 9001 ISO/IEC standards ITIL OMG PMBOK SWEBOK Glossaries Artificial intelligence Computer science Electrical and electronics engineering Outlines Software development C programming language C sharp programming language C++ programming language Java programming language JavaScript programming language Python programming language Rust programming language html.skin-theme-clientpref-night v t e Agile software development is an umbrella term for approaches to developing software that reflect the values and principles agreed upon by The Agile Alliance , a group of 17 software practitioners, in 2001. 1 As documented in their Manifesto for Agile Software Development, the practitioners value: 2 Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan The practitioners cite inspiration from new practices at the time including extreme programming , scrum , dynamic systems development method , adaptive software development , and being sympathetic to the need for an alternative to documentation-driven, heavyweight software development processes. 3 Many software development practices emerged from the agile mindset. These agile-based practices, sometimes called Agile (with a capital A), 4 include requirements, discovery, and solutions improvement through the collaborative effort of self-organizing and cross-functional teams with their customer(s) / end user(s) . 5 6 While there is much anecdotal evidence that the agile mindset and agile-based practices improve the software development process, the empirical evidence is limited and less than conclusive. 7 8 9 History Iterative and incremental software development methods can be traced back as early as 1957, 10 with evolutionary project management 11 12 and adaptive software development 13 emerging in the early 1970s. 14 During the 1990s, a number of lightweight software development methods evolved in reaction to the prevailing heavyweight methods (often referred to collectively as waterfall ) that critics described as overly regulated, planned, and micromanaged . 15 These lightweight methods included: rapid application development (RAD), from 1991; 16 17 the unified process (UP) and dynamic systems development method (DSDM), both from 1994; Scrum , from 1995; Crystal Clear and extreme programming (XP), both from 1996; and feature-driven development (FDD), from 1997. Although these all originated before the publication of the Agile Manifesto , they are now collectively referred to as agile software development methods. 3 Already since 1991 similar changes had been underway in manufacturing 18 19 and management thinking 20 derived from Lean management . In 2001, seventeen software developers met at a resort in Snowbird, Utah to discuss lightweight development methods. They were: Kent Beck (Extreme Programming), Ward Cunningham (Extreme Programming), Dave Thomas ( Pragmatic Programming , Ruby), Jeff Sutherland (Scrum), Ken Schwaber (Scrum), Jim Highsmith (Adaptive Software Development), Alistair Cockburn (Crystal), Robert C. Martin ( SOLID ), Mike Beedle (Scrum), Arie van Bennekum, Martin Fowler ( OOAD and UML ), James Grenning, Andrew Hunt (Pragmatic Programming, Ruby), Ron Jeffries (Extreme Programming), Jon Kern , Brian Marick (Ruby, Test-driven development ), and Steve Mellor ( OOA ). The group, The Agile Alliance, published the Manifesto for Agile Software Development . 2 In 2005, a group headed by Cockburn and Highsmith wrote an addendum of project management principles, the PM Declaration of Interdependence, 21 to guide software project management according to agile software development methods. In 2009, a group working with Martin wrote an extension of software development principles, the Software Craftsmanship Manifesto , to guide agile software development according to professional conduct and mastery. In 2011, the Agile Alliance created the Guide to Agile Practices (renamed the Agile Glossary in 2016), 22 an evolving open-source compendium of the working definitions of agile practices, terms, and elements, along with interpretations and experience guidelines from the worldwide community of agile practitioners. Values and principles Values The agile manifesto reads: 2 We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value: Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan That is, while there is value in the items on the right, we value the items on the left more. Scott Ambler explained: 23 Tools and processes are important, but it is more important to have competent people working together effectively. Good documentation is useful in helping people to understand how the software is built and how to use it, but the main point of development is to create software, not documentation. A contract is important but is not a substitute for working closely with customers to discover what they need. A project plan is important, but it must not be too rigid to accommodate changes in technology or the environment, stakeholders' priorities, and people's understanding of the problem and its solution. Introducing the manifesto on behalf of the Agile Alliance, Jim Highsmith said, n n /ref> , ' > The Agile movement is not anti-methodology, in fact many of us want to restore credibility to the word methodology. We want to restore a balance. We embrace modeling, but not in order to file some diagram in a dusty corporate repository. We embrace documentation, but not hundreds of pages of never-maintained and rarely-used tomes. We plan, but recognize the limits of planning in a turbulent environment. Those who would brand proponents of XP or SCRUM or any of the other Agile Methodologies as hackers are ignorant of both the methodologies and the original definition of the term hacker. — Jim Highsmith, History: The Agile Manifesto 24 Principles The values are based on these principles: 25 Customer satisfaction by early and continuous delivery of valuable software. Welcome changing requirements, even in late development. Deliver working software frequently (weeks rather than months). Close, daily cooperation between business people and developers. Projects are built around motivated individuals, who should be trusted. Face-to-face conversation is the best form of communication (co-location). Working software is the primary measure of progress. Sustainable development, able to maintain a constant pace. Continuous attention to technical excellence and good design. Simplicity—the art of maximizing the amount of work not done—is essential. Best architectures , requirements, and designs emerge from self-organizing teams. Regularly, the team reflects on how to become more effective, and adjusts accordingly. Overview Iterative, incremental, and evolutionary Most agile development methods break product development work into small increments that minimize the amount of up-front planning and design. Iterations, or sprints, are short time frames ( timeboxes ) 26 that typically last from one to four weeks. 27 : 20 Each iteration involves a cross-functional team working in all functions: planning , analysis , design , coding , unit testing , and acceptance testing . At the end of the iteration a working product is demonstrated to stakeholders. This minimizes overall risk and allows the product to adapt to changes quickly. 28 29 An iteration might not add enough functionality to warrant a market release, but the goal is to have an available release (with minimal bugs ) at the end of each iteration. 30 Through incremental development, products have room to fail often and early throughout each iterative phase instead of drastically on a final release date. 31 Multiple iterations might be required to release a product or new features. Working software is the primary measure of progress. 25 A key advantage of agile approaches is speed to market and risk mitigation. Smaller increments are typically released to market, reducing the time and cost risks of engineering a product that doesn't meet user requirements. Efficient and face-to-face communication The 6th principle of the agile manifesto for software development states The most efficient and effective method of conveying information to and within a development team is face-to-face conversation . The manifesto, written in 2001 when video conferencing was not widely used, states this in relation to the communication of information, not necessarily that a team should be co-located. The principle of co-location is that co-workers on the same team should be situated together to better establish the identity as a team and to improve communication. 32 This enables face-to-face interaction , ideally in front of a whiteboard, that reduces the cycle time typically taken when questions and answers are mediated through phone, persistent chat , wiki, or email. 33 With the widespread adoption of remote working during the COVID-19 pandemic and changes to tooling, more studies have been conducted 34 around co-location and distributed working which show that co-location is increasingly less relevant. No matter which development method is followed, every team should include a customer representative (known as product owner in Scrum ). This representative is agreed by stakeholders to act on their behalf and makes a personal commitment to being available for developers to answer questions throughout the iteration. At the end of each iteration, the project stakeholders together with the customer representative review progress and re-evaluate priorities with a view to optimizing the return on investment (ROI) and ensuring alignment with customer needs and company goals. The importance of stakeholder satisfaction, detailed by frequent interaction and review at the end of each phase, is why the approach is often denoted as a customer-centered methodology . 35 Information radiator In agile software development, an information radiator is a (normally large) physical display, board with sticky notes or similar, located prominently near the development team, where passers-by can see it. 36 It presents an up-to-date summary of the product development status. 37 A build light indicator may also be used to inform a team about the current status of their product development. Very short feedback loop and adaptation cycle A common characteristic in agile software development is the daily stand-up (known as daily scrum in the Scrum framework). In a brief session (e.g., 15 minutes), team members review collectively how they are progressing toward their goal and agree whether they need to adapt their approach. To keep to the agreed time limit, teams often use simple coded questions (such as what they completed the previous day, what they aim to complete that day, and whether there are any impediments or risks to progress), and delay detailed discussions and problem resolution until after the stand-up. 38 Quality focus Pair programming , an agile development technique used in XP Specific tools and techniques, such as continuous integration , automated unit testing , pair programming , test-driven development , design patterns , behavior-driven development , domain-driven design , code refactoring and other techniques are often used to improve quality and enhance product development agility. 39 This is predicated on designing and building quality in from the beginning and being able to demonstrate software for customers at any point, or at least at the end of every iteration. 40 Philosophy Compared to traditional software engineering, agile software development mainly targets complex systems and product development with dynamic, indeterministic and non-linear properties . Accurate estimates, stable plans, and predictions are often hard to get in early stages, and confidence in them is likely to be low. Agile practitioners use their free will to reduce the leap of faith that is needed before any evidence of value can be obtained. 41 Requirements and design are held to be emergent . Big up-front specifications would probably cause a lot of waste in such cases, i.e., are not economically sound. These basic arguments and previous industry experiences , learned from years of successes and failures, have helped shape agile development's favor of adaptive, iterative and evolutionary development. 42 Adaptive vs. predictive Development methods exist on a continuum from adaptive to predictive . 43 Agile software development methods lie on the adaptive side of this continuum. One key of adaptive development methods is a rolling wave approach to schedule planning, which identifies milestones but leaves flexibility in the path to reach them, and also allows for the milestones themselves to change. 44 Adaptive methods focus on adapting quickly to changing realities. When the needs of a project change, an adaptive team changes as well. An adaptive team has difficulty describing exactly what will happen in the future. The further away a date is, the more vague an adaptive method is about what will happen on that date. An adaptive team cannot report exactly what tasks they will do next week, but only which features they plan for next month. When asked about a release six months from now, an adaptive team might be able to report only the mission statement for the release, or a statement of expected value vs. cost. Predictive methods, in contrast, focus on analyzing and planning the future in detail and cater for known risks. In the extremes, a predictive team can report exactly what features and tasks are planned for the entire length of the development process. Predictive methods rely on effective early phase analysis, and if this goes very wrong, the project may have difficulty changing direction. Predictive teams often institute a change control board to ensure they consider only the most valuable changes. Risk analysis can be used to choose between adaptive ( agile or value-driven ) and predictive ( plan-driven ) methods. 45 Barry Boehm and Richard Turner suggest that each side of the continuum has its own home ground , as follows: 46 Home grounds of different development methods Value-driven methods (agile) Plan-driven methods (waterfall) Formal methods Low criticality High criticality Extreme criticality Senior developers Junior developers(?) Senior developers Requirements change often Requirements do not change often Limited requirements, limited features, see Wirth's law clarification needed Small number of developers Large number of developers Requirements that can be modeled Culture that responds to change Culture that demands order Extreme quality Agile vs. waterfall One of the differences between agile software development methods and waterfall is the approach to quality and testing. In the waterfall model , work moves through software development life cycle (SDLC) phases—with one phase being completed before another can start—hence the testing phase is separate and follows a build phase . In agile software development, however, testing is completed in the same iteration as programming. Because testing is done in every iteration—which develops a small piece of the software—users can frequently use those new pieces of software and validate the value. After the users know the real value of the updated piece of software, they can make better decisions about the software's future. Having a value retrospective and software re-planning session in each iteration— Scrum typically has iterations of just two weeks—helps the team continuously adapt its plans so as to maximize the value it delivers. This follows a pattern similar to the plan-do-check-act (PDCA) cycle, as the work is planned , done , checked (in the review and retrospective), and any changes agreed are acted upon. This iterative approach supports a product rather than a project mindset. This provides greater flexibility throughout the development process; whereas on projects the requirements are defined and locked down from the very beginning, making it difficult to change them later. Iterative product development allows the software to evolve in response to changes in business environment or market requirements. Code vs. documentation In a letter to IEEE Computer , Steven Rakitin expressed cynicism about agile software development, calling it yet another attempt to undermine the discipline of software engineering and translating working software over comprehensive documentation as we want to spend all our time coding. Remember, real programmers don't write documentation . 47 This is disputed by proponents of agile software development, who state that developers should write documentation if that is the best way to achieve the relevant goals, but that there are often better ways to achieve those goals than writing static documentation. 48 Scott Ambler states that documentation should be just barely good enough (JBGE), 49 that too much or comprehensive documentation would usually cause waste, and developers rarely trust detailed documentation because it's usually out of sync with code, 48 while too little documentation may also cause problems for maintenance, communication, learning and knowledge sharing. Alistair Cockburn wrote of the Crystal Clear method: quoting /ref> , ' /> Crystal considers development a series of co-operative games, and intends that the documentation is enough to help the next win at the next game. The work products for Crystal include use cases, risk list, iteration plan, core domain models, and design notes to inform on choices...however there are no templates for these documents and descriptions are necessarily vague, but the objective is clear, just enough documentation for the next game. I always tend to characterize this to my team as: what would you want to know if you joined the team tomorrow. — Alistair Cockburn 50 Methods Software development life cycle support 51 Agile unified process (AUP) is based on unified process (an iterative and incremental software development process framework). Agile software development methods support a broad range of the software development life cycle . 51 Some methods focus on the practices (e.g., XP , pragmatic programming , agile modeling), while some focus on managing the flow of work (e.g., Scrum, Kanban). Some support activities for requirements specification and development (e.g., FDD ), while some seek to cover the full development life cycle (e.g., DSDM , RUP ). Notable agile software development frameworks include: Framework Main contributor(s) Adaptive software development (ASD) Jim Highsmith , Sam Bayer Agile modeling Scott Ambler , Robert Cecil Martin Agile unified process (AUP) Scott Ambler Disciplined agile delivery Scott Ambler Dynamic systems development method (DSDM) Jennifer Stapleton Extreme programming (XP) Kent Beck , Robert Cecil Martin Feature-driven development (FDD) Jeff De Luca Lean software development Mary Poppendieck, Tom Poppendieck Lean startup Eric Ries Kanban Taiichi Ohno Rapid application development (RAD) James Martin Scrum Ken Schwaber , Jeff Sutherland Scrumban Agile software development practices Agile software development is supported by a number of concrete practices, covering areas like requirements, design, modeling, coding, testing, planning, risk management, process, quality, etc. Some notable agile software development practices include: 52 Practice Main contributor(s) Acceptance test-driven development (ATDD) Ken Pugh Agile modeling Scott Ambler Agile testing Lisa Crispin, Janet Gregory Backlogs (Product and Sprint) Ken Schwaber , Jeff Sutherland Behavior-driven development (BDD) Dan North, Liz Keogh Continuous integration (CI) Grady Booch Cross-functional team Daily stand-up / Daily Scrum James O Coplien Domain-driven design (DDD) Eric Evans Iterative and incremental development (IID) Pair programming Kent Beck Planning poker James Grenning, Mike Cohn Refactoring Martin Fowler Retrospective Esther Derby, Diana Larsen, Ben Linders, Luis Gonçalves Scrum events (sprint planning, sprint review and retrospective) Ken Schwaber , Jeff Sutherland Specification by example Story-driven modeling Albert Zündorf Test-driven development (TDD) Kent Beck Timeboxing User story Alistair Cockburn Velocity tracking Acceptance test-driven development This paragraph is an excerpt from Acceptance test-driven development . edit Acceptance test–driven development (ATDD) is a development methodology based on communication between the business customers, the developers, and the testers. 53 ATDD encompasses many of the same practices as specification by example (SBE), 54 55 behavior-driven development (BDD), 56 example-driven development (EDD), 57 and support-driven development also called story test–driven development (SDD). 58 All these processes aid developers and testers in understanding the customer's needs prior to implementation and allow customers to be able to converse in their own domain language. Agile modeling This paragraph is an excerpt from Agile modeling . edit Agile modeling (AM) is a methodology for modeling and documenting software systems based on best practices. It is a collection of values and principles that can be applied on an (agile) software development project. This methodology is more flexible than traditional modeling methods, making it a better fit in a fast-changing environment. 59 It is part of the agile software development tool kit. Agile testing This paragraph is an excerpt from Agile testing . edit Agile testing is a software testing practice that follows the principles of agile software development. Agile testing involves all members of a cross-functional agile team, with special expertise contributed by testers, to ensure delivering the business value desired by the customer at frequent intervals, working at a sustainable pace. Specification by example is used to capture examples of desired and undesired behavior and guide coding. Backlogs This paragraph is an excerpt from Product backlog . edit Within agile project management , product backlog refers to a prioritized list of functionality which a product should contain. It is sometimes referred to as a to-do list , 60 and is considered an 'artifact' (a form of documentation) within the scrum software development framework. 61 The product backlog is referred to with different names in different project management frameworks, such as product backlog in scrum, 61 62 work item list in disciplined agile , 62 63 and option pool in lean . 62 In the scrum framework, creation and continuous maintenance of the product backlog is part of the responsibility of the product owner . 64 Behavior-driven development This paragraph is an excerpt from Behavior-driven development . edit Behavior-driven development (BDD) involves naming software tests using domain language to describe the behavior of the code . Continuous integration This paragraph is an excerpt from Continuous integration . edit Continuous integration (CI) is the practice of integrating source code changes frequently and ensuring that the integrated codebase is in a workable state. Typically, developers merge changes to an integration branch , and an automated system builds and tests the software system . 65 Often, the automated process runs on each commit or runs on a schedule such as once a day. Grady Booch first proposed the term CI in 1991 , 66 although he did not advocate integrating multiple times a day, but later, CI came to include that aspect. 67 Cross-functional team This paragraph is an excerpt from Cross-functional team . edit A cross-functional team (XFN), also known as a multidisciplinary team or interdisciplinary team, 68 69 70 is a group of people with different functional expertise working toward a common goal. 71 It may include people from finance , marketing , operations , and human resources departments. Typically, it includes employees from all levels of an organization. Members may also come from outside an organization (in particular, from suppliers, key customers, or consultants). Daily stand-up This paragraph is an excerpt from Stand-up meeting . edit A stand-up meeting (stum) is a meeting in which attendees typically participate while standing , usually at around 10am. The discomfort of standing for long periods is intended to keep the meetings short. Method tailoring In the literature, different terms refer to the notion of method adaptation, including 'method tailoring', 'method fragment adaptation' and 'situational method engineering'. Method tailoring is defined as: /ref> , ' /> A process or capability in which human agents determine a system development approach for a specific project situation through responsive changes in, and dynamic interplays between contexts, intentions, and method fragments. — Mehmet Nafiz Aydin et al., An Agile Information Systems Development Method in use 72 Situation-appropriateness should be considered as a distinguishing characteristic between agile methods and more plan-driven software development methods, with agile methods allowing product development teams to adapt working practices according to the needs of individual products. 73 72 Potentially, most agile methods could be suitable for method tailoring, 51 such as DSDM tailored in a CMM context. 74 and XP tailored with the Rule Description Practices (RDP) technique. 75 Not all agile proponents agree, however, with Schwaber noting that is how we got into trouble in the first place, thinking that the problem was not having a perfect methodology. Efforts should center on the changes needed in the enterprise . 76 Bas Vodde reinforced this viewpoint, suggesting that unlike traditional, large methodologies that require you to pick and choose elements, Scrum provides the basics on top of which you add additional elements to localize and contextualize its use. 77 Practitioners seldom use system development methods , or agile methods specifically, by the book, often choosing to omit or tailor some of the practices of a method in order to create an in-house method. 78 In practice, methods can be tailored using various tools. Generic process modeling languages such as Unified Modeling Language can be used to tailor software development methods. However, dedicated tools for method engineering such as the Essence Theory of Software Engineering of SEMAT also exist. 79 Large-scale, offshore and distributed Agile software development has been widely seen as highly suited to certain types of environments, including small teams of experts working on greenfield projects , 46 80 and the challenges and limitations encountered in the adoption of agile software development methods in a large organization with legacy infrastructure are well-documented and understood. 81 In response, a range of strategies and patterns has evolved for overcoming challenges with large-scale development efforts (>20 developers) 82 83 or distributed (non-colocated) development teams, 84 85 amongst other challenges; and there are now several recognized frameworks that seek to mitigate or avoid these challenges. There are many conflicting viewpoints on whether all of these are effective or indeed fit the definition of agile development, and this remains an active and ongoing area of research. 82 86 When agile software development is applied in a distributed setting (with teams dispersed across multiple business locations), it is commonly referred to as distributed agile software development . The goal is to leverage the unique benefits offered by each approach. Distributed development allows organizations to build software by strategically setting up teams in different parts of the globe, virtually building software round-the-clock (more commonly referred to as follow-the-sun model). On the other hand, agile development provides increased transparency, continuous feedback, and more flexibility when responding to changes. Regulated domains Agile software development methods were initially seen as best suitable for non-critical product developments, thereby excluded from use in regulated domains such as medical devices , pharmaceutical, financial, nuclear systems, automotive, and avionics sectors, etc. However, in the last several years, there have been several initiatives for the adaptation of agile methods for these domains. 87 88 89 90 91 There are numerous standards that may apply in regulated domains, including ISO 26262 , ISO 9000 , ISO 9001 , and ISO/IEC 15504 . A number of key concerns are of particular importance in regulated domains: 92 Quality assurance (QA): Systematic and inherent quality management underpinning a controlled professional process and reliability and correctness of product. Safety and security: Formal planning and risk management to mitigate safety risks for users and securely protecting users from unintentional and malicious misuse. Traceability : Documentation providing auditable evidence of regulatory compliance and facilitating traceability and investigation of problems. Verification and validation (V V): Embedded throughout the software development process (e.g. user requirements specification, functional specification, design specification, code review, unit tests, integration tests, system tests). Experience and adoption Although agile software development methods can be used with any programming paradigm or language in practice, they were originally closely associated with object-oriented environments such as Smalltalk, Lisp and later Java, C#. The initial adopters of agile methods were usually small to medium-sized teams working on unprecedented systems with requirements that were difficult to finalize and likely to change as the system was being developed. This section describes common problems that organizations encounter when they try to adopt agile software development methods as well as various techniques to measure the quality and performance of agile teams. 93 Measuring agility Internal assessments The Agility measurement index , amongst others, rates developments against five dimensions of product development (duration, risk, novelty, effort, and interaction). 94 Other techniques are based on measurable goals 95 and one study suggests that velocity can be used as a metric of agility. There are also agile self-assessments to determine whether a team is using agile software development practices (Nokia test, 96 Karlskrona test, 97 42 points test). 98 Public surveys One of the early studies reporting gains in quality, productivity, and business satisfaction by using agile software developments methods was a survey conducted by Shine Technologies from November 2002 to January 2003. 99 A similar survey, the State of Agile , is conducted every year starting in 2006 with thousands of participants from around the software development community. This tracks trends on the perceived benefits of agility, lessons learned, and good practices. Each survey has reported increasing numbers saying that agile software development helps them deliver software faster; improves their ability to manage changing customer priorities; and increases their productivity. 100 Surveys have also consistently shown better results with agile product development methods compared to classical project management. 101 102 In balance, there are reports that some feel that agile development methods are still too young to enable extensive academic research of their success. 103 Common agile software development pitfalls Organizations and teams implementing agile software development often face difficulties transitioning from more traditional methods such as waterfall development , such as teams having an agile process forced on them. 104 These are often termed agile anti-patterns or more commonly agile smells . Below are some common examples: Lack of overall product design A goal of agile software development is to focus more on producing working software and less on documentation. This is in contrast to waterfall models where the process is often highly controlled and minor changes to the system require significant revision of supporting documentation. However, this does not justify completely doing without any analysis or design at all. Failure to pay attention to design can cause a team to proceed rapidly at first, but then to require significant rework as they attempt to scale up the system. One of the key features of agile software development is that it is iterative. When done correctly, agile software development allows the design to emerge as the system is developed and helps the team discover commonalities and opportunities for re-use. 105 Adding stories to an iteration in progress In agile software development, stories (similar to use case descriptions) are typically used to define requirements and an iteration is a short period of time during which the team commits to specific goals. 106 Adding stories to an iteration in progress is detrimental to a good flow of work. These should be added to the product backlog and prioritized for a subsequent iteration or in rare cases the iteration could be cancelled. 107 This does not mean that a story cannot expand. Teams must deal with new information, which may produce additional tasks for a story. If the new information prevents the story from being completed during the iteration, then it should be carried over to a subsequent iteration. However, it should be prioritized against all remaining stories, as the new information may have changed the story's original priority. Lack of sponsor support Agile software development is often implemented as a grassroots effort in organizations by software development teams trying to optimize their development processes and ensure consistency in the software development life cycle. By not having sponsor support, teams may face difficulties and resistance from business partners, other development teams and management. Additionally, they may suffer without appropriate funding and resources. 108 This increases the likelihood of failure. 109 Insufficient training A survey performed by VersionOne found respondents cited insufficient training as the most significant cause for failed agile implementations 110 Teams have fallen into the trap of assuming the reduced processes of agile software development compared to other approaches such as waterfall means that there are no actual rules for agile software development. citation needed Product owner role is not properly filled The product owner is responsible for representing the business in the development activity and is often the most demanding role. 111 A common mistake is to fill the product owner role with someone from the development team. This requires the team to make its own decisions on prioritization without real feedback from the business. They try to solve business issues internally or delay work as they reach outside the team for direction. This often leads to distraction and a breakdown in collaboration. 112 Teams are not focused Agile software development requires teams to meet product commitments, which means they should focus on work for only that product. However, team members who appear to have spare capacity are often expected to take on other work, which makes it difficult for them to help complete the work to which their team had committed. 113 Excessive preparation/planning Teams may fall into the trap of spending too much time preparing or planning. This is a common trap for teams less familiar with agile software development where the teams feel obliged to have a complete understanding and specification of all stories. Teams should be prepared to move forward with only those stories in which they have confidence, then during the iteration continue to discover and prepare work for subsequent iterations (often referred to as backlog refinement or grooming). Problem-solving in the daily standup A daily standup should be a focused, timely meeting where all team members disseminate information. If problem-solving occurs, it often can involve only certain team members and potentially is not the best use of the entire team's time. If during the daily standup the team starts diving into problem-solving, it should be set aside until a sub-team can discuss, usually immediately after the standup completes. 114 Assigning tasks One of the intended benefits of agile software development is to empower the team to make choices, as they are closest to the problem. Additionally, they should make choices as close to implementation as possible, to use more timely information in the decision. If team members are assigned tasks by others or too early in the process, the benefits of localized and timely decision making can be lost. 115 Being assigned work also constrains team members into certain roles (for example, team member A must always do the database work), which limits opportunities for cross-training. 115 Team members themselves can choose to take on tasks that stretch their abilities and provide cross-training opportunities. Scrum master as a contributor In the Scrum framework, which claims to be consistent with agile values and principles, the scrum master role is accountable for ensuring the scrum process is followed and for coaching the scrum team through that process. A common pitfall is for a scrum master to act as a contributor. While not prohibited by the Scrum framework, the scrum master needs to ensure they have the capacity to act in the role of scrum master first and not work on development tasks. A scrum master's role is to facilitate the process rather than create the product. 116 Having the scrum master also multitasking may result in too many context switches to be productive. Additionally, as a scrum master is responsible for ensuring roadblocks are removed so that the team can make forward progress, the benefit gained by individual tasks moving forward may not outweigh roadblocks that are deferred due to lack of capacity. 117 Lack of test automation Further information: Test automation Due to the iterative nature of agile development, multiple rounds of testing are often needed. Automated testing helps reduce the impact of repeated unit, integration, and regression tests and frees developers and testers to focus on higher value work. 118 Test automation also supports continued refactoring required by iterative software development. Allowing a developer to quickly run tests to confirm refactoring has not modified the functionality of the application may reduce the workload and increase confidence that cleanup efforts have not introduced new defects. Allowing technical debt to build up Further information: Technical debt Focusing on delivering new functionality may result in increased technical debt . The team must allow themselves time for defect remediation and refactoring. Technical debt hinders planning abilities by increasing the amount of unscheduled work as production defects distract the team from further progress. 119 As the system evolves it is important to refactor . 120 Over time the lack of constant maintenance causes increasing defects and development costs. 119 Attempting to take on too much in an iteration A common misconception is that agile software development allows continuous change, however an iteration backlog is an agreement of what work can be completed during an iteration. 121 Having too much work-in-progress (WIP) results in inefficiencies such as context-switching and queueing. 122 The team must avoid feeling pressured into taking on additional work. 123 Fixed time, resources, scope, and quality Agile software development fixes time (iteration duration), quality, and ideally resources in advance (though maintaining fixed resources may be difficult if developers are often pulled away from tasks to handle production incidents), while the",
  "cached_at": "2025-10-25T20:03:50.952957"
}