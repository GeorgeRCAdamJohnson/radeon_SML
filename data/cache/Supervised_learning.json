{
  "title": "Supervised learning",
  "summary": "In machine learning, supervised learning (SL) is a type of machine learning paradigm where an algorithm learns to map input data to a specific output based on example input-output pairs. This process involves training a statistical model using labeled data, meaning each piece of input data is provided with the correct output. For instance, if you want a model to identify cats in images, supervised learning would involve feeding it many images of cats (inputs) that are explicitly labeled \"cat\" (outputs).",
  "content": "Supervised learning Machine learning paradigm In supervised learning, the training data is labeled with the expected answers, while in unsupervised learning , the model identifies patterns or structures in unlabeled data. In machine learning , supervised learning ( SL ) is a type of machine learning paradigm where an algorithm learns to map input data to a specific output based on example input-output pairs. This process involves training a statistical model using labeled data, meaning each piece of input data is provided with the correct output. For instance, if you want a model to identify cats in images, supervised learning would involve feeding it many images of cats (inputs) that are explicitly labeled \"cat\" (outputs). The goal of supervised learning is for the trained model to accurately predict the output for new, unseen data. [ 1 ] This requires the algorithm to effectively generalize from the training examples, a quality measured by its generalization error . Supervised learning is commonly used for tasks like classification (predicting a category, e.g., spam or not spam) and regression (predicting a continuous value, e.g., house prices). Steps to follow To solve a given problem of supervised learning, the following steps must be performed: Determine the type of training samples. Before doing anything else, the user should decide what kind of data is to be used as a training set . In the case of handwriting analysis , for example, this might be a single handwritten character, an entire handwritten word, an entire sentence of handwriting, or a full paragraph of handwriting. Gather a training set. The training set needs to be representative of the real-world use of the function. Thus, a set of input objects is gathered together with corresponding outputs, either from human experts or from measurements. Determine the input feature representation of the learned function. The accuracy of the learned function depends strongly on how the input object is represented. Typically, the input object is transformed into a feature vector , which contains a number of features that are descriptive of the object. The number of features should not be too large, because of the curse of dimensionality ; but should contain enough information to accurately predict the output. Determine the structure of the learned function and corresponding learning algorithm. For example, one may choose to use support-vector machines or decision trees . Complete the design. Run the learning algorithm on the gathered training set. Some supervised learning algorithms require the user to determine certain control parameters . These parameters may be adjusted by optimizing performance on a subset (called a validation set ) of the training set, or via cross-validation . Evaluate the accuracy of the learned function. After parameter adjustment and learning, the performance of the resulting function should be measured on a test set that is separate from the training set. Algorithm choice A wide range of supervised learning algorithms are available, each with its strengths and weaknesses. There is no single learning algorithm that works best on all supervised learning problems (see the No free lunch theorem ). There are four major issues to consider in supervised learning: Bias–variance tradeoff .mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}@media print{body.ns-0 .mw-parser-output .hatnote{display:none!important}} Main article: Bias–variance tradeoff A first issue is the tradeoff between bias and variance . [ 2 ] Imagine that we have available several different, but equally good, training data sets. A learning algorithm is biased for a particular input x {\\displaystyle x} if, when trained on each of these data sets, it is systematically incorrect when predicting the correct output for x {\\displaystyle x} . A learning algorithm has high variance for a particular input x {\\displaystyle x} if it predicts different output values when trained on different training sets. The prediction error of a learned classifier is related to the sum of the bias and the variance of the learning algorithm. [ 3 ] Generally, there is a tradeoff between bias and variance. A learning algorithm with low bias must be \"flexible\" so that it can fit the data well. But if the learning algorithm is too flexible, it will fit each training data set differently, and hence have high variance. A key aspect of many supervised learning methods is that they are able to adjust this tradeoff between bias and variance (either automatically or by providing a bias/variance parameter that the user can adjust). Function complexity and amount of training data The second issue is of the amount of training data available relative to the complexity of the \"true\" function (classifier or regression function). If the true function is simple, then an \"inflexible\" learning algorithm with high bias and low variance will be able to learn it from a small amount of data. But if the true function is highly complex (e.g., because it involves complex interactions among many different input features and behaves differently in different parts of the input space), then the function will only be able to learn with a large amount of training data paired with a \"flexible\" learning algorithm with low bias and high variance. Dimensionality of the input space A third issue is the dimensionality of the input space. If the input feature vectors have large dimensions, learning the function can be difficult even if the true function only depends on a small number of those features. This is because the many \"extra\" dimensions can confuse the learning algorithm and cause it to have high variance. Hence, input data of large dimensions typically requires tuning the classifier to have low variance and high bias. In practice, if the engineer can manually remove irrelevant features from the input data, it will likely improve the accuracy of the learned function. In addition, there are many algorithms for feature selection that seek to identify the relevant features and discard the irrelevant ones. This is an instance of the more general strategy of dimensionality reduction , which seeks to map the input data into a lower-dimensional space prior to running the supervised learning algorithm. Noise in the output values A fourth issue is the degree of noise in the desired output values (the supervisory target variables ). If the desired output values are often incorrect (because of human error or sensor errors), then the learning algorithm should not attempt to find a function that exactly matches the training examples. Attempting to fit the data too carefully leads to overfitting . You can overfit even when there are no measurement errors (stochastic noise) if the function you are trying to learn is too complex for your learning model. In such a situation, the part of the target function that cannot be modeled \"corrupts\" your training data – this phenomenon has been called deterministic noise . When either type of noise is present, it is better to go with a higher bias, lower variance estimator. In practice, there are several approaches to alleviate noise in the output values such as early stopping to prevent overfitting as well as detecting and removing the noisy training examples prior to training the supervised learning algorithm. There are several algorithms that identify noisy training examples and removing the suspected noisy training examples prior to training has decreased generalization error with statistical significance . [ 4 ] [ 5 ] Other factors to consider Other factors to consider when choosing and applying a learning algorithm include the following: Heterogeneity of the data. If the feature vectors include features of many different kinds (discrete, discrete ordered, counts, continuous values), some algorithms are easier to apply than others. Many algorithms, including support-vector machines , linear regression , logistic regression , neural networks , and nearest neighbor methods , require that the input features be numerical and scaled to similar ranges (e.g., to the [-1,1] interval). Methods that employ a distance function, such as nearest neighbor methods and support-vector machines with Gaussian kernels , are particularly sensitive to this. An advantage of decision trees is that they easily handle heterogeneous data. Redundancy in the data. If the input features contain redundant information (e.g., highly correlated features), some learning algorithms (e.g., linear regression , logistic regression , and distance-based methods ) will perform poorly because of numerical instabilities. These problems can often be solved by imposing some form of regularization . Presence of interactions and non-linearities. If each of the features makes an independent contribution to the output, then algorithms based on linear functions (e.g., linear regression , logistic regression , support-vector machines , naive Bayes ) and distance functions (e.g., nearest neighbor methods, support-vector machines with Gaussian kernels ) generally perform well. However, if there are complex interactions among features, then algorithms such as decision trees and neural networks work better, because they are specifically designed to discover these interactions. Linear methods can also be applied, but the engineer must manually specify the interactions when using them. When considering a new application, the engineer can compare multiple learning algorithms and experimentally determine which one works best on the problem at hand (see cross-validation ). Tuning the performance of a learning algorithm can be very time-consuming. Given fixed resources, it is often better to spend more time collecting additional training data and more informative features than it is to spend extra time tuning the learning algorithms. Algorithms The most widely used learning algorithms are: Support-vector machines Linear regression Logistic regression Naive Bayes Linear discriminant analysis Decision trees k -nearest neighbors algorithm Neural networks (e.g., Multilayer perceptron ) Similarity learning How supervised learning algorithms work Given a set of N {\\displaystyle N} training examples of the form { ( x 1 , y 1 ) , . . . , ( x N , y N ) } {\\displaystyle \\{(x_{1},y_{1}),...,(x_{N},\\;y_{N})\\}} such that x i {\\displaystyle x_{i}} is the feature vector of the i {\\displaystyle i} -th example and y i {\\displaystyle y_{i}} is its label (i.e., class), a learning algorithm seeks a function g : X → Y {\\displaystyle g:X\\to Y} , where X {\\displaystyle X} is the input space and Y {\\displaystyle Y} is the output space. The function g {\\displaystyle g} is an element of some space of possible functions G {\\displaystyle G} , usually called the hypothesis space . It is sometimes convenient to represent g {\\displaystyle g} using a scoring function f : X × Y → R {\\displaystyle f:X\\times Y\\to \\mathbb {R} } such that g {\\displaystyle g} is defined as returning the y {\\displaystyle y} value that gives the highest score: g ( x ) = arg ⁡ max y f ( x , y ) {\\displaystyle g(x)={\\underset {y}{\\arg \\max }}\\;f(x,y)} . Let F {\\displaystyle F} denote the space of scoring functions. Although G {\\displaystyle G} and F {\\displaystyle F} can be any space of functions, many learning algorithms are probabilistic models where g {\\displaystyle g} takes the form of a conditional probability model g ( x ) = arg ⁡ max y P ( y | x ) {\\displaystyle g(x)={\\underset {y}{\\arg \\max }}\\;P(y|x)} , or f {\\displaystyle f} takes the form of a joint probability model f ( x , y ) = P ( x , y ) {\\displaystyle f(x,y)=P(x,y)} . For example, naive Bayes and linear discriminant analysis are joint probability models, whereas logistic regression is a conditional probability model. There are two basic approaches to choosing f {\\displaystyle f} or g {\\displaystyle g} : empirical risk minimization and structural risk minimization . [ 6 ] Empirical risk minimization seeks the function that best fits the training data. Structural risk minimization includes a penalty function that controls the bias/variance tradeoff. In both cases, it is assumed that the training set consists of a sample of independent and identically distributed pairs , ( x i , y i ) {\\displaystyle (x_{i},\\;y_{i})} . In order to measure how well a function fits the training data, a loss function L : Y × Y → R ≥ 0 {\\displaystyle L:Y\\times Y\\to \\mathbb {R} ^{\\geq 0}} is defined. For training example ( x i , y i ) {\\displaystyle (x_{i},\\;y_{i})} , the loss of predicting the value y ^ {\\displaystyle {\\hat {y}}} is L ( y i , y ^ ) {\\displaystyle L(y_{i},{\\hat {y}})} . The risk R ( g ) {\\displaystyle R(g)} of function g {\\displaystyle g} is defined as the expected loss of g {\\displaystyle g} . This can be estimated from the training data as R e m p ( g ) = 1 N ∑ i L ( y i , g ( x i ) ) {\\displaystyle R_{emp}(g)={\\frac {1}{N}}\\sum _{i}L(y_{i},g(x_{i}))} . Empirical risk minimization Main article: Empirical risk minimization In empirical risk minimization, the supervised learning algorithm seeks the function g {\\displaystyle g} that minimizes R ( g ) {\\displaystyle R(g)} . Hence, a supervised learning algorithm can be constructed by applying an optimization algorithm to find g {\\displaystyle g} . When g {\\displaystyle g} is a conditional probability distribution P ( y | x ) {\\displaystyle P(y|x)} and the loss function is the negative log likelihood: L ( y , y ^ ) = − log ⁡ P ( y | x ) {\\displaystyle L(y,{\\hat {y}})=-\\log P(y|x)} , then empirical risk minimization is equivalent to maximum likelihood estimation . When G {\\displaystyle G} contains many candidate functions or the training set is not sufficiently large, empirical risk minimization leads to high variance and poor generalization. The learning algorithm is able to memorize the training examples without generalizing well (overfitting). Structural risk minimization Structural risk minimization seeks to prevent overfitting by incorporating a regularization penalty into the optimization. The regularization penalty can be viewed as implementing a form of Occam's razor that prefers simpler functions over more complex ones. A wide variety of penalties have been employed that correspond to different definitions of complexity. For example, consider the case where the function g {\\displaystyle g} is a linear function of the form g ( x ) = ∑ j = 1 d β j x j {\\displaystyle g(x)=\\sum _{j=1}^{d}\\beta _{j}x_{j}} . A popular regularization penalty is ∑ j β j 2 {\\displaystyle \\sum _{j}\\beta _{j}^{2}} , which is the squared Euclidean norm of the weights, also known as the L 2 {\\displaystyle L_{2}} norm. Other norms include the L 1 {\\displaystyle L_{1}} norm, ∑ j | β j | {\\displaystyle \\sum _{j}|\\beta _{j}|} , and the L 0 {\\displaystyle L_{0}} \"norm\" , which is the number of non-zero β j {\\displaystyle \\beta _{j}} s. The penalty will be denoted by C ( g ) {\\displaystyle C(g)} . The supervised learning optimization problem is to find the function g {\\displaystyle g} that minimizes J ( g ) = R e m p ( g ) + λ C ( g ) . {\\displaystyle J(g)=R_{emp}(g)+\\lambda C(g).} The parameter λ {\\displaystyle \\lambda } controls the bias-variance tradeoff. When λ = 0 {\\displaystyle \\lambda =0} , this gives empirical risk minimization with low bias and high variance. When λ {\\displaystyle \\lambda } is large, the learning algorithm will have high bias and low variance. The value of λ {\\displaystyle \\lambda } can be chosen empirically via cross-validation . The complexity penalty has a Bayesian interpretation as the negative log prior probability of g {\\displaystyle g} , − log ⁡ P ( g ) {\\displaystyle -\\log P(g)} , in which case J ( g ) {\\displaystyle J(g)} is the posterior probability of g {\\displaystyle g} . Generative training The training methods described above are discriminative training methods, because they seek to find a function g {\\displaystyle g} that discriminates well between the different output values (see discriminative model ). For the special case where f ( x , y ) = P ( x , y ) {\\displaystyle f(x,y)=P(x,y)} is a joint probability distribution and the loss function is the negative log likelihood − ∑ i log ⁡ P ( x i , y i ) , {\\displaystyle -\\sum _{i}\\log P(x_{i},y_{i}),} a risk minimization algorithm is said to perform generative training , because f {\\displaystyle f} can be regarded as a generative model that explains how the data were generated. Generative training algorithms are often simpler and more computationally efficient than discriminative training algorithms. In some cases, the solution can be computed in closed form as in naive Bayes and linear discriminant analysis . Generalizations Tendency for a task to employ supervised vs. unsupervised methods. Task names straddling circle boundaries is intentional. It shows that the classical division of imaginative tasks (left) employing unsupervised methods is blurred in today's learning schemes. There are several ways in which the standard supervised learning problem can be generalized: Semi-supervised learning or weak supervision : the desired output values are provided only for a subset of the training data. The remaining data is unlabeled or imprecisely labeled. Active learning : Instead of assuming that all of the training examples are given at the start, active learning algorithms interactively collect new examples, typically by making queries to a human user. Often, the queries are based on unlabeled data, which is a scenario that combines semi-supervised learning with active learning. Structured prediction : When the desired output value is a complex object, such as a parse tree or a labeled graph, then standard methods must be extended. Learning to rank : When the input is a set of objects and the desired output is a ranking of those objects, then again the standard methods must be extended. Approaches and algorithms Analytical learning Artificial neural network Backpropagation Boosting (meta-algorithm) Bayesian statistics Case-based reasoning Decision tree learning Inductive logic programming Gaussian process regression Genetic programming Group method of data handling Kernel estimators Learning automata Learning classifier systems Learning vector quantization Minimum message length ( decision trees , decision graphs, etc.) Multilinear subspace learning Naive Bayes classifier Maximum entropy classifier Conditional random field Nearest neighbor algorithm Probably approximately correct learning (PAC) learning Ripple down rules , a knowledge acquisition methodology Symbolic machine learning algorithms Subsymbolic machine learning algorithms Support vector machines Minimum complexity machines (MCM) Random forests Ensembles of classifiers Ordinal classification Data pre-processing Handling imbalanced datasets Statistical relational learning Proaftn , a multicriteria classification algorithm Applications Bioinformatics Cheminformatics Quantitative structure–activity relationship Database marketing Handwriting recognition Information retrieval Learning to rank Information extraction Object recognition in computer vision Optical character recognition Spam detection Pattern recognition Speech recognition Supervised learning is a special case of downward causation in biological systems Landform classification using satellite imagery [ 7 ] Spend classification in procurement processes [ 8 ] General issues Computational learning theory Inductive bias Overfitting (Uncalibrated) class membership probabilities Version spaces See also List of datasets for machine-learning research Unsupervised learning References .mw-parser-output .reflist{margin-bottom:0.5em;list-style-type:decimal}@media screen{.mw-parser-output .reflist{font-size:90%}}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman} ↑ Mehryar Mohri , Afshin Rostamizadeh, Ameet Talwalkar (2012) Foundations of Machine Learning , The MIT Press .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free.id-lock-free a{background:url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited.id-lock-limited a,.mw-parser-output .id-lock-registration.id-lock-registration a{background:url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription.id-lock-subscription a{background:url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-free a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-limited a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-registration a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-subscription a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .cs1-ws-icon a{background-size:contain;padding:0 1em 0 0}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:var(--color-error,#d33)}.mw-parser-output .cs1-visible-error{color:var(--color-error,#d33)}.mw-parser-output .cs1-maint{display:none;color:#085;margin-left:0.3em}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}@media screen{.mw-parser-output .cs1-format{font-size:95%}html.skin-theme-clientpref-night .mw-parser-output .cs1-maint{color:#18911f}}@media screen and (prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .cs1-maint{color:#18911f}} ISBN 9780262018258 . ↑ S. Geman, E. Bienenstock, and R. Doursat (1992). Neural networks and the bias/variance dilemma . Neural Computation 4, 1–58. ↑ G. James (2003) Variance and Bias for General Loss Functions, Machine Learning 51, 115–135. ( http://www-bcf.usc.edu/~gareth/research/bv.pdf ) ↑ C.E. Brodely and M.A. Friedl (1999). Identifying and Eliminating Mislabeled Training Instances, Journal of Artificial Intelligence Research 11, 131–167. ( http://jair.org/media/606/live-606-1803-jair.pdf ) ↑ M.R. Smith and T. Martinez (2011). \"Improving Classification Accuracy by Identifying and Removing Instances that Should Be Misclassified\". Proceedings of International Joint Conference on Neural Networks (IJCNN 2011) . pp. 2690– 2697. CiteSeerX 10.1.1.221.1371 . doi : 10.1109/IJCNN.2011.6033571 . ↑ Vapnik, V. N. The Nature of Statistical Learning Theory (2nd Ed.), Springer Verlag, 2000. ↑ A. Maity (2016). \"Supervised Classification of RADARSAT-2 Polarimetric Data for Different Land Features\". arXiv : 1608.00501 [ cs.CV ]. ↑ \"Key Technologies for Agile Procurement | SIPMM Publications\" . publication.sipmm.edu.sg . 2020-10-09 . Retrieved 2022-06-16 . External links Machine Learning Open Source Software (MLOSS) .mw-parser-output .hlist dl,.mw-parser-output .hlist ol,.mw-parser-output .hlist ul{margin:0;padding:0}.mw-parser-output .hlist dd,.mw-parser-output .hlist dt,.mw-parser-output .hlist li{margin:0;display:inline}.mw-parser-output .hlist.inline,.mw-parser-output .hlist.inline dl,.mw-parser-output .hlist.inline ol,.mw-parser-output .hlist.inline ul,.mw-parser-output .hlist dl dl,.mw-parser-output .hlist dl ol,.mw-parser-output .hlist dl ul,.mw-parser-output .hlist ol dl,.mw-parser-output .hlist ol ol,.mw-parser-output .hlist ol ul,.mw-parser-output .hlist ul dl,.mw-parser-output .hlist ul ol,.mw-parser-output .hlist ul ul{display:inline}.mw-parser-output .hlist .mw-empty-li{display:none}.mw-parser-output .hlist dt::after{content:\": \"}.mw-parser-output .hlist dd::after,.mw-parser-output .hlist li::after{content:\" · \";font-weight:bold}.mw-parser-output .hlist dd:last-child::after,.mw-parser-output .hlist dt:last-child::after,.mw-parser-output .hlist li:last-child::after{content:none}.mw-parser-output .hlist dd dd:first-child::before,.mw-parser-output .hlist dd dt:first-child::before,.mw-parser-output .hlist dd li:first-child::before,.mw-parser-output .hlist dt dd:first-child::before,.mw-parser-output .hlist dt dt:first-child::before,.mw-parser-output .hlist dt li:first-child::before,.mw-parser-output .hlist li dd:first-child::before,.mw-parser-output .hlist li dt:first-child::before,.mw-parser-output .hlist li li:first-child::before{content:\" (\";font-weight:normal}.mw-parser-output .hlist dd dd:last-child::after,.mw-parser-output .hlist dd dt:last-child::after,.mw-parser-output .hlist dd li:last-child::after,.mw-parser-output .hlist dt dd:last-child::after,.mw-parser-output .hlist dt dt:last-child::after,.mw-parser-output .hlist dt li:last-child::after,.mw-parser-output .hlist li dd:last-child::after,.mw-parser-output .hlist li dt:last-child::after,.mw-parser-output .hlist li li:last-child::after{content:\")\";font-weight:normal}.mw-parser-output .hlist ol{counter-reset:listitem}.mw-parser-output .hlist ol>li{counter-increment:listitem}.mw-parser-output .hlist ol>li::before{content:\" \"counter(listitem)\"\\a0 \"}.mw-parser-output .hlist dd ol>li:first-child::before,.mw-parser-output .hlist dt ol>li:first-child::before,.mw-parser-output .hlist li ol>li:first-child::before{content:\" (\"counter(listitem)\"\\a0 \"} .mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd;color:inherit}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf;color:inherit}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf;color:inherit}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff;color:inherit}.mw-parser-output .navbox-even{background-color:#f7f7f7;color:inherit}.mw-parser-output .navbox-odd{background-color:transparent;color:inherit}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}body.skin--responsive .mw-parser-output .navbox-image img{max-width:none!important}@media print{body.ns-0 .mw-parser-output .navbox{display:none!important}} .mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}html.skin-theme-clientpref-night .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}}@media print{.mw-parser-output .navbar{display:none!important}} v t e Differentiable computing General Differentiable programming Information geometry Statistical manifold Automatic differentiation Neuromorphic computing Pattern recognition Ricci calculus Computational learning theory Inductive bias Hardware IPU TPU VPU Memristor SpiNNaker Software libraries TensorFlow PyTorch Keras scikit-learn Theano JAX Flux.jl MindSpore Portals Computer programming Technology Authority control databases National United States Israel Other Yale LUX",
  "cached_at": "2025-10-25T19:35:10.109620"
}