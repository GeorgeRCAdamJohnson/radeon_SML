{
  "title": "Automated reasoning",
  "summary": "In computer science, in particular in knowledge representation and reasoning and metalogic, the area of automated reasoning is dedicated to understanding different aspects of reasoning. The study of automated reasoning helps produce computer programs that allow computers to reason completely, or nearly completely, automatically. Although automated reasoning is considered a sub-field of artificial intelligence, it also has connections with theoretical computer science and philosophy.",
  "content": "Automated reasoning .mw-parser-output .ambox{border:1px solid #a2a9b1;border-left:10px solid #36c;background-color:#fbfbfb;box-sizing:border-box}.mw-parser-output .ambox+link+.ambox,.mw-parser-output .ambox+link+style+.ambox,.mw-parser-output .ambox+link+link+.ambox,.mw-parser-output .ambox+.mw-empty-elt+link+.ambox,.mw-parser-output .ambox+.mw-empty-elt+link+style+.ambox,.mw-parser-output .ambox+.mw-empty-elt+link+link+.ambox{margin-top:-1px}html body.mediawiki .mw-parser-output .ambox.mbox-small-left{margin:4px 1em 4px 0;overflow:hidden;width:238px;border-collapse:collapse;font-size:88%;line-height:1.25em}.mw-parser-output .ambox-speedy{border-left:10px solid #b32424;background-color:#fee7e6}.mw-parser-output .ambox-delete{border-left:10px solid #b32424}.mw-parser-output .ambox-content{border-left:10px solid #f28500}.mw-parser-output .ambox-style{border-left:10px solid #fc3}.mw-parser-output .ambox-move{border-left:10px solid #9932cc}.mw-parser-output .ambox-protection{border-left:10px solid #a2a9b1}.mw-parser-output .ambox .mbox-text{border:none;padding:0.25em 0.5em;width:100%}.mw-parser-output .ambox .mbox-image{border:none;padding:2px 0 2px 0.5em;text-align:center}.mw-parser-output .ambox .mbox-imageright{border:none;padding:2px 0.5em 2px 0;text-align:center}.mw-parser-output .ambox .mbox-empty-cell{border:none;padding:0;width:1px}.mw-parser-output .ambox .mbox-image-div{width:52px}@media(min-width:720px){.mw-parser-output .ambox{margin:0 10%}}@media print{body.ns-0 .mw-parser-output .ambox{display:none!important}} This article needs to be updated . Please help update this article to reflect recent events or newly available information. ( May 2025 ) Subfield of computer science and logic In computer science , in particular in knowledge representation and reasoning and metalogic , the area of automated reasoning is dedicated to understanding different aspects of reasoning . The study of automated reasoning helps produce computer programs that allow computers to reason completely, or nearly completely, automatically. Although automated reasoning is considered a sub-field of artificial intelligence , it also has connections with theoretical computer science and philosophy . The most developed subareas of automated reasoning are automated theorem proving (and the less automated but more pragmatic subfield of interactive theorem proving ) and automated proof checking (viewed as guaranteed correct reasoning under fixed assumptions). [ citation needed ] Extensive work has also been done in reasoning by analogy using induction and abduction . [ 1 ] Other important topics include reasoning under uncertainty and non-monotonic reasoning. An important part of the uncertainty field is that of argumentation, where further constraints of minimality and consistency are applied on top of the more standard automated deduction. John Pollock 's OSCAR system is an example of an automated argumentation system that is more specific than being just an automated theorem prover. Tools and techniques of automated reasoning include the classical logics and calculi, fuzzy logic , Bayesian inference , reasoning with maximal entropy and many less formal ad hoc techniques. In the 2020s, to enhance the ability of large language models to solve complex problems, AI researchers have designed reasoning language models that can spend additional time on the problem before generating an answer. [ 2 ] Early years The development of formal logic played a big role in the field of automated reasoning, which itself led to the development of artificial intelligence . A formal proof is a proof in which every logical inference has been checked back to the fundamental axioms of mathematics. All the intermediate logical steps are supplied, without exception. No appeal is made to intuition, even if the translation from intuition to logic is routine. Thus, a formal proof is less intuitive and less susceptible to logical errors. [ 3 ] Some consider the Cornell Summer meeting of 1957, which brought together many logicians and computer scientists, as the origin of automated reasoning, or automated deduction . [ 4 ] Others say that it began before that with the 1955 Logic Theorist program of Newell, Shaw and Simon, or with Martin Davis’ 1954 implementation of Presburger's decision procedure (which proved that the sum of two even numbers is even). [ 5 ] Automated reasoning, although a significant and popular area of research, went through an \" AI winter \" in the eighties and early nineties. The field subsequently revived, however. For example, in 2005, Microsoft started using verification technology in many of their internal projects and is planning to include a logical specification and checking language in their 2012 version of Visual C. [ 4 ] Significant contributions Principia Mathematica was a milestone work in formal logic written by Alfred North Whitehead and Bertrand Russell . Its purpose was to derive all or some of the mathematical expressions , in terms of symbolic logic . Principia Mathematica was initially published in three volumes in 1910, 1912 and 1913. [ 6 ] . It succeeded The Principles of Mathematics , a 1903 book by Bertrand Russell , in which Russell had presented his famous paradox and argued his thesis that mathematics and logic are identical. Logic Theorist (LT) was the first ever program developed in 1956 by Allen Newell , Cliff Shaw and Herbert A. Simon to \"mimic human reasoning\" in proving theorems and was demonstrated on fifty-two theorems from chapter two of Principia Mathematica, proving thirty-eight of them. [ 7 ] In addition to proving the theorems, the program found a proof for one of the theorems that was more elegant than the one provided by Whitehead and Russell. After an unsuccessful attempt at publishing their results, Newell, Shaw, and Herbert reported in their publication in 1958, The Next Advance in Operation Research : \"There are now in the world machines that think, that learn and that create. Moreover, their ability to do these things is going to increase rapidly until (in a visible future) the range of problems they can handle will be co- extensive with the range to which the human mind has been applied.\" [ 8 ] Examples of Formal Proofs Year Theorem Proof System Formalizer Traditional Proof 1986 First Incompleteness Boyer-Moore Shankar [ 9 ] Gödel 1990 Quadratic Reciprocity Boyer-Moore Russinoff [ 10 ] Eisenstein 1996 Fundamental- of Calculus HOL Light Harrison Henstock 2000 Fundamental- of Algebra Mizar Milewski Brynski 2000 Fundamental- of Algebra Rocq (then: Coq ) Geuvers et al. Kneser 2004 Four Color Rocq (then: Coq ) Gonthier Robertson et al. 2004 Prime Number Isabelle Avigad et al. Selberg - Erdős 2005 Jordan Curve HOL Light Hales Thomassen 2005 Brouwer Fixed Point HOL Light Harrison Kuhn 2006 Flyspeck 1 Isabelle Bauer- Nipkow Hales 2007 Cauchy Residue HOL Light Harrison Classical 2008 Prime Number HOL Light Harrison Analytic proof 2012 Feit-Thompson Rocq (then: Coq ) Gonthier et al. [ 11 ] Bender, Glauberman and Peterfalvi 2016 Boolean Pythagorean triples problem Formalized as SAT Heule et al. [ 12 ] None Proof systems Boyer-Moore Theorem Prover (NQTHM) The design of NQTHM was influenced by John McCarthy and Woody Bledsoe. Started in 1971 at Edinburgh, Scotland, this was a fully automatic theorem prover built using Pure Lisp . The main aspects of NQTHM were: the use of Lisp as a working logic. the reliance on a principle of definition for total recursive functions. the extensive use of rewriting and \"symbolic evaluation\". an induction heuristic based the failure of symbolic evaluation. [ 13 ] [ 14 ] HOL Light Written in OCaml , HOL Light is designed to have a simple and clean logical foundation and an uncluttered implementation. It is essentially another proof assistant for classical higher order logic. [ 15 ] Rocq Developed in France, Rocq is another automated proof assistant, which can automatically extract executable programs from specifications, as either Objective CAML or Haskell source code. Properties, programs and proofs are formalized in the same language called the Calculus of Inductive Constructions (CIC). [ 16 ] Applications Automated reasoning has been most commonly used to build automated theorem provers. Oftentimes, however, theorem provers require some human guidance to be effective and so more generally qualify as proof assistants . In some cases such provers have come up with new approaches to proving a theorem. Logic Theorist is a good example of this. The program came up with a proof for one of the theorems in Principia Mathematica that was more efficient (requiring fewer steps) than the proof provided by Whitehead and Russell. Automated reasoning programs are being applied to solve a growing number of problems in formal logic, mathematics and computer science, logic programming , software and hardware verification, circuit design , and many others. The TPTP (Sutcliffe and Suttner 1998) is a library of such problems that is updated on a regular basis. There is also a competition among automated theorem provers held regularly at the CADE conference (Pelletier, Sutcliffe and Suttner 2002); the problems for the competition are selected from the TPTP library. [ 17 ] See also Automated machine learning (AutoML) Automated theorem proving Reasoning system Semantic reasoner Program analysis (computer science) Applications of artificial intelligence Outline of artificial intelligence Casuistry • Case-based reasoning Abductive reasoning Inference engine Commonsense reasoning Conferences and workshops International Joint Conference on Automated Reasoning (IJCAR) Conference on Automated Deduction (CADE) International Conference on Automated Reasoning with Analytic Tableaux and Related Methods Journals Journal of Automated Reasoning Communities Association for Automated Reasoning (AAR) References ↑ Defourneaux, Gilles, and Nicolas Peltier. \" Analogy and abduction in automated deduction .\" IJCAI (1). 1997. ↑ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free.id-lock-free a{background:url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited.id-lock-limited a,.mw-parser-output .id-lock-registration.id-lock-registration a{background:url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription.id-lock-subscription a{background:url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-free a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-limited a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-registration a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-subscription a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .cs1-ws-icon a{background-size:contain;padding:0 1em 0 0}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:var(--color-error,#d33)}.mw-parser-output .cs1-visible-error{color:var(--color-error,#d33)}.mw-parser-output .cs1-maint{display:none;color:#085;margin-left:0.3em}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}@media screen{.mw-parser-output .cs1-format{font-size:95%}html.skin-theme-clientpref-night .mw-parser-output .cs1-maint{color:#18911f}}@media screen and (prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .cs1-maint{color:#18911f}} Kemper, Jonathan (2025-05-11). \"Deepseek-R1 triggers boom in reasoning-enabled language models\" . the decoder . Retrieved 2025-05-16 . ↑ C. Hales, Thomas \"Formal Proof\" , University of Pittsburgh. Retrieved on 2010-10-19 1 2 \"Automated Deduction (AD)\" , [The Nature of PRL Project] . Retrieved on 2010-10-19 ↑ Martin Davis (1983). \"The Prehistory and Early History of Automated Deduction\". In Jörg Siekmann; G. Wrightson (eds.). Automation of Reasoning (1) — Classical Papers on Computational Logic 1957 – 1966 . Heidelberg: Springer. pp. 1– 28. ISBN 978-3-642-81954-4 . Here: p.15 ↑ \"Principia Mathematica\" , at Stanford University . Retrieved 2010-10-19 ↑ \"The Logic Theorist and its Children\" . Retrieved 2010-10-18 ↑ Shankar, Natarajan Little Engines of Proof , Computer Science Laboratory, SRI International . Retrieved 2010-10-19 ↑ Shankar, N. (1994), Metamathematics, Machines, and Gödel's Proof , Cambridge, UK: Cambridge University Press, ISBN 9780521585330 ↑ Russinoff, David M. (1992), \"A Mechanical Proof of Quadratic Reciprocity\", J. Autom. Reason. , 8 (1): 3– 21, doi : 10.1007/BF00263446 , S2CID 14824949 ↑ Gonthier, G.; et al. (2013), \"A Machine-Checked Proof of the Odd Order Theorem\" (PDF) , in Blazy, S. ; Paulin-Mohring, C.; Pichardie, D. (eds.), Interactive Theorem Proving , Lecture Notes in Computer Science, vol. 7998, pp. 163– 179, CiteSeerX 10.1.1.651.7964 , doi : 10.1007/978-3-642-39634-2_14 , ISBN 978-3-642-39633-5 , S2CID 1855636 ↑ Heule, Marijn J. H. ; Kullmann, Oliver; Marek, Victor W. (2016). \"Solving and Verifying the Boolean Pythagorean Triples Problem via Cube-and-Conquer\". Theory and Applications of Satisfiability Testing – SAT 2016 . Lecture Notes in Computer Science. Vol. 9710. pp. 228– 245. arXiv : 1605.00723 . doi : 10.1007/978-3-319-40970-2_15 . ISBN 978-3-319-40969-6 . S2CID 7912943 . ↑ The Boyer-Moore Theorem Prover Retrieved on 2010-10-23 ↑ Boyer, Robert S. and Moore, J Strother and Passmore, Grant Olney The PLTP Archive . Retrieved on 2023-07-27 ↑ Harrison, John HOL Light: an overview . Retrieved 2010-10-23 ↑ Introduction to Coq . Retrieved 2010-10-23 ↑ \"Automated Reasoning\" . Stanford Encyclopedia of Philosophy . 2025. External links International Workshop on the Implementation of Logics Workshop Series on Empirically Successful Topics in Automated Reasoning .mw-parser-output .hlist dl,.mw-parser-output .hlist ol,.mw-parser-output .hlist ul{margin:0;padding:0}.mw-parser-output .hlist dd,.mw-parser-output .hlist dt,.mw-parser-output .hlist li{margin:0;display:inline}.mw-parser-output .hlist.inline,.mw-parser-output .hlist.inline dl,.mw-parser-output .hlist.inline ol,.mw-parser-output .hlist.inline ul,.mw-parser-output .hlist dl dl,.mw-parser-output .hlist dl ol,.mw-parser-output .hlist dl ul,.mw-parser-output .hlist ol dl,.mw-parser-output .hlist ol ol,.mw-parser-output .hlist ol ul,.mw-parser-output .hlist ul dl,.mw-parser-output .hlist ul ol,.mw-parser-output .hlist ul ul{display:inline}.mw-parser-output .hlist .mw-empty-li{display:none}.mw-parser-output .hlist dt::after{content:\": \"}.mw-parser-output .hlist dd::after,.mw-parser-output .hlist li::after{content:\" · \";font-weight:bold}.mw-parser-output .hlist dd:last-child::after,.mw-parser-output .hlist dt:last-child::after,.mw-parser-output .hlist li:last-child::after{content:none}.mw-parser-output .hlist dd dd:first-child::before,.mw-parser-output .hlist dd dt:first-child::before,.mw-parser-output .hlist dd li:first-child::before,.mw-parser-output .hlist dt dd:first-child::before,.mw-parser-output .hlist dt dt:first-child::before,.mw-parser-output .hlist dt li:first-child::before,.mw-parser-output .hlist li dd:first-child::before,.mw-parser-output .hlist li dt:first-child::before,.mw-parser-output .hlist li li:first-child::before{content:\" (\";font-weight:normal}.mw-parser-output .hlist dd dd:last-child::after,.mw-parser-output .hlist dd dt:last-child::after,.mw-parser-output .hlist dd li:last-child::after,.mw-parser-output .hlist dt dd:last-child::after,.mw-parser-output .hlist dt dt:last-child::after,.mw-parser-output .hlist dt li:last-child::after,.mw-parser-output .hlist li dd:last-child::after,.mw-parser-output .hlist li dt:last-child::after,.mw-parser-output .hlist li li:last-child::after{content:\")\";font-weight:normal}.mw-parser-output .hlist ol{counter-reset:listitem}.mw-parser-output .hlist ol>li{counter-increment:listitem}.mw-parser-output .hlist ol>li::before{content:\" \"counter(listitem)\"\\a0 \"}.mw-parser-output .hlist dd ol>li:first-child::before,.mw-parser-output .hlist dt ol>li:first-child::before,.mw-parser-output .hlist li ol>li:first-child::before{content:\" (\"counter(listitem)\"\\a0 \"} .mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd;color:inherit}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf;color:inherit}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf;color:inherit}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff;color:inherit}.mw-parser-output .navbox-even{background-color:#f7f7f7;color:inherit}.mw-parser-output .navbox-odd{background-color:transparent;color:inherit}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}body.skin--responsive .mw-parser-output .navbox-image img{max-width:none!important}@media print{body.ns-0 .mw-parser-output .navbox{display:none!important}} .mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}html.skin-theme-clientpref-night .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}}@media print{.mw-parser-output .navbar{display:none!important}} v t e Knowledge representation and reasoning Backward chaining Case-based reasoning Commonsense reasoning Forward chaining Model-based reasoning Inference engines Proof assistants Knowledge engineering Expert systems CLIPS Connectionist expert systems Expert systems for mortgages Legal expert systems Reasoning systems Theorem provers Constraint solvers Deductive classifiers Logic programs Procedural reasoning systems Rule engines Ontology languages Attempto Controlled English CycL F-logic FO(.) Knowledge Interchange Format Web Ontology Language Theorem provers CARINE E Nqthm Otter Paradox Prover9 SPASS TPS Z3 Constraint satisfaction Constraint programming Constraint logic programming Local consistency SMT solvers Automated planning Motion planning Multi-agent planning Partial-order planning Preference-based planning Reactive planning State-space planning",
  "cached_at": "2025-10-25T19:35:01.732667"
}